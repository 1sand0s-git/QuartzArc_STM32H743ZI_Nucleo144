
STM32_H7N.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f30  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080021c8  080021c8  000121c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080021d8  080021d8  000121d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080021dc  080021dc  000121dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  24000000  080021e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000044  24000074  08002254  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240000b8  08002254  000200b8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000a376  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00017869  00000000  00000000  0002a418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002688  00000000  00000000  00041c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000708  00000000  00000000  00044310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00176015  00000000  00000000  00044a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000640  00000000  00000000  001baa30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003c9a4  00000000  00000000  001bb070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001f7a14  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001dcc  00000000  00000000  001f7a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000074 	.word	0x24000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080021b0 	.word	0x080021b0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000078 	.word	0x24000078
 80002d4:	080021b0 	.word	0x080021b0

080002d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80002d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000310 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80002dc:	f000 fad0 	bl	8000880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e0:	480c      	ldr	r0, [pc, #48]	; (8000314 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002e2:	490d      	ldr	r1, [pc, #52]	; (8000318 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002e4:	4a0d      	ldr	r2, [pc, #52]	; (800031c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e8:	e002      	b.n	80002f0 <LoopCopyDataInit>

080002ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ee:	3304      	adds	r3, #4

080002f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f4:	d3f9      	bcc.n	80002ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f6:	4a0a      	ldr	r2, [pc, #40]	; (8000320 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80002f8:	4c0a      	ldr	r4, [pc, #40]	; (8000324 <LoopFillZerobss+0x22>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002fc:	e001      	b.n	8000302 <LoopFillZerobss>

080002fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000300:	3204      	adds	r2, #4

08000302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000304:	d3fb      	bcc.n	80002fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000306:	f001 fe63 	bl	8001fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800030a:	f000 fa0f 	bl	800072c <main>
  bx  lr
 800030e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000310:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000314:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000318:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 800031c:	080021e0 	.word	0x080021e0
  ldr r2, =_sbss
 8000320:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000324:	240000b8 	.word	0x240000b8

08000328 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000328:	e7fe      	b.n	8000328 <ADC3_IRQHandler>
	...

0800032c <_Z16SystemInitializev>:
  //System Initialization Function


//SystemInitialize
//System Initialization Function
QA_Result SystemInitialize(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b0aa      	sub	sp, #168	; 0xa8
 8000330:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000332:	4b8d      	ldr	r3, [pc, #564]	; (8000568 <_Z16SystemInitializev+0x23c>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800033a:	2b00      	cmp	r3, #0
 800033c:	bf14      	ite	ne
 800033e:	2301      	movne	r3, #1
 8000340:	2300      	moveq	r3, #0
 8000342:	b2db      	uxtb	r3, r3
 8000344:	2b00      	cmp	r3, #0
 8000346:	d11b      	bne.n	8000380 <_Z16SystemInitializev+0x54>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000348:	f3bf 8f4f 	dsb	sy
}
 800034c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800034e:	f3bf 8f6f 	isb	sy
}
 8000352:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000354:	4b84      	ldr	r3, [pc, #528]	; (8000568 <_Z16SystemInitializev+0x23c>)
 8000356:	2200      	movs	r2, #0
 8000358:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800035c:	f3bf 8f4f 	dsb	sy
}
 8000360:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000362:	f3bf 8f6f 	isb	sy
}
 8000366:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000368:	4b7f      	ldr	r3, [pc, #508]	; (8000568 <_Z16SystemInitializev+0x23c>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a7e      	ldr	r2, [pc, #504]	; (8000568 <_Z16SystemInitializev+0x23c>)
 800036e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000372:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000374:	f3bf 8f4f 	dsb	sy
}
 8000378:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800037a:	f3bf 8f6f 	isb	sy
}
 800037e:	e000      	b.n	8000382 <_Z16SystemInitializev+0x56>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000380:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000382:	4b79      	ldr	r3, [pc, #484]	; (8000568 <_Z16SystemInitializev+0x23c>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800038a:	2b00      	cmp	r3, #0
 800038c:	bf14      	ite	ne
 800038e:	2301      	movne	r3, #1
 8000390:	2300      	moveq	r3, #0
 8000392:	b2db      	uxtb	r3, r3
 8000394:	2b00      	cmp	r3, #0
 8000396:	d14f      	bne.n	8000438 <_Z16SystemInitializev+0x10c>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000398:	4b73      	ldr	r3, [pc, #460]	; (8000568 <_Z16SystemInitializev+0x23c>)
 800039a:	2200      	movs	r2, #0
 800039c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003a0:	f3bf 8f4f 	dsb	sy
}
 80003a4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003a6:	4b70      	ldr	r3, [pc, #448]	; (8000568 <_Z16SystemInitializev+0x23c>)
 80003a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80003b4:	0b5b      	lsrs	r3, r3, #13
 80003b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80003c2:	08db      	lsrs	r3, r3, #3
 80003c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80003c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80003d0:	015a      	lsls	r2, r3, #5
 80003d2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80003d6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80003d8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80003dc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003de:	4962      	ldr	r1, [pc, #392]	; (8000568 <_Z16SystemInitializev+0x23c>)
 80003e0:	4313      	orrs	r3, r2
 80003e2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80003e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80003ea:	1e5a      	subs	r2, r3, #1
 80003ec:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	bf14      	ite	ne
 80003f4:	2301      	movne	r3, #1
 80003f6:	2300      	moveq	r3, #0
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d000      	beq.n	8000400 <_Z16SystemInitializev+0xd4>
      do {
 80003fe:	e7e5      	b.n	80003cc <_Z16SystemInitializev+0xa0>
    } while(sets-- != 0U);
 8000400:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000404:	1e5a      	subs	r2, r3, #1
 8000406:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800040a:	2b00      	cmp	r3, #0
 800040c:	bf14      	ite	ne
 800040e:	2301      	movne	r3, #1
 8000410:	2300      	moveq	r3, #0
 8000412:	b2db      	uxtb	r3, r3
 8000414:	2b00      	cmp	r3, #0
 8000416:	d000      	beq.n	800041a <_Z16SystemInitializev+0xee>
    do {
 8000418:	e7d1      	b.n	80003be <_Z16SystemInitializev+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
 800041a:	f3bf 8f4f 	dsb	sy
}
 800041e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000420:	4b51      	ldr	r3, [pc, #324]	; (8000568 <_Z16SystemInitializev+0x23c>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	4a50      	ldr	r2, [pc, #320]	; (8000568 <_Z16SystemInitializev+0x23c>)
 8000426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800042a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800042c:	f3bf 8f4f 	dsb	sy
}
 8000430:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000432:	f3bf 8f6f 	isb	sy
}
 8000436:	e000      	b.n	800043a <_Z16SystemInitializev+0x10e>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000438:	bf00      	nop
  SCB_EnableDCache();


  //--------------------------
  //Set NVIC Priority Grouping
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800043a:	2003      	movs	r0, #3
 800043c:	f000 fbc0 	bl	8000bc0 <HAL_NVIC_SetPriorityGrouping>


  //------------
	//Init SysTick
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000440:	2000      	movs	r0, #0
 8000442:	f000 faa9 	bl	8000998 <HAL_InitTick>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	bf14      	ite	ne
 800044c:	2301      	movne	r3, #1
 800044e:	2300      	moveq	r3, #0
 8000450:	b2db      	uxtb	r3, r3
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <_Z16SystemInitializev+0x12e>
		return QA_Fail;
 8000456:	2301      	movs	r3, #1
 8000458:	e132      	b.n	80006c0 <_Z16SystemInitializev+0x394>
  //HAL_Init();


  //----------------------------------
  //Configure Internal Power Regulator
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800045a:	2002      	movs	r0, #2
 800045c:	f000 fdb8 	bl	8000fd0 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000460:	2300      	movs	r3, #0
 8000462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000464:	4b41      	ldr	r3, [pc, #260]	; (800056c <_Z16SystemInitializev+0x240>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a40      	ldr	r2, [pc, #256]	; (800056c <_Z16SystemInitializev+0x240>)
 800046a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b3e      	ldr	r3, [pc, #248]	; (800056c <_Z16SystemInitializev+0x240>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800047a:	4b3d      	ldr	r3, [pc, #244]	; (8000570 <_Z16SystemInitializev+0x244>)
 800047c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800047e:	4a3c      	ldr	r2, [pc, #240]	; (8000570 <_Z16SystemInitializev+0x244>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000486:	4b3a      	ldr	r3, [pc, #232]	; (8000570 <_Z16SystemInitializev+0x244>)
 8000488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000492:	4b36      	ldr	r3, [pc, #216]	; (800056c <_Z16SystemInitializev+0x240>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800049a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800049e:	bf14      	ite	ne
 80004a0:	2301      	movne	r3, #1
 80004a2:	2300      	moveq	r3, #0
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d000      	beq.n	80004ac <_Z16SystemInitializev+0x180>
 80004aa:	e7f2      	b.n	8000492 <_Z16SystemInitializev+0x166>


  //---------------------
  //Configure Oscillators
  RCC_OscInitTypeDef RCC_OscInit = {0};
 80004ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004b0:	224c      	movs	r2, #76	; 0x4c
 80004b2:	2100      	movs	r1, #0
 80004b4:	4618      	mov	r0, r3
 80004b6:	f001 fdb7 	bl	8002028 <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004ba:	2301      	movs	r3, #1
 80004bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInit.HSEState       = RCC_HSE_BYPASS;
 80004be:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80004c2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;
 80004c4:	2302      	movs	r3, #2
 80004c6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 80004c8:	2302      	movs	r3, #2
 80004ca:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInit.PLL.PLLM       = 1;
 80004cc:	2301      	movs	r3, #1
 80004ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInit.PLL.PLLN       = 120;
 80004d0:	2378      	movs	r3, #120	; 0x78
 80004d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInit.PLL.PLLP       = 2;
 80004d6:	2302      	movs	r3, #2
 80004d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInit.PLL.PLLQ       = 20;
 80004dc:	2314      	movs	r3, #20
 80004de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInit.PLL.PLLR       = 2;
 80004e2:	2302      	movs	r3, #2
 80004e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInit.PLL.PLLRGE     = RCC_PLL1VCIRANGE_3;
 80004e8:	230c      	movs	r3, #12
 80004ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInit.PLL.PLLVCOSEL  = RCC_PLL1VCOWIDE;
 80004ee:	2300      	movs	r3, #0
 80004f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInit.PLL.PLLFRACN   = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {
 80004fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fda0 	bl	8001044 <HAL_RCC_OscConfig>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	bf14      	ite	ne
 800050a:	2301      	movne	r3, #1
 800050c:	2300      	moveq	r3, #0
 800050e:	b2db      	uxtb	r3, r3
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <_Z16SystemInitializev+0x1ec>
    return QA_Fail;
 8000514:	2301      	movs	r3, #1
 8000516:	e0d3      	b.n	80006c0 <_Z16SystemInitializev+0x394>
//  __HAL_RCC_SYSCFG_CLK_ENABLE();


  //--------------------------
  //Configure CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 8000518:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800051c:	2220      	movs	r2, #32
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f001 fd81 	bl	8002028 <memset>
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000526:	233f      	movs	r3, #63	; 0x3f
 8000528:	633b      	str	r3, [r7, #48]	; 0x30
  		                         RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |
															 RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 800052a:	2303      	movs	r3, #3
 800052c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInit.SYSCLKDivider  = RCC_SYSCLK_DIV1;
 800052e:	2300      	movs	r3, #0
 8000530:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInit.AHBCLKDivider  = RCC_HCLK_DIV2;
 8000532:	2308      	movs	r3, #8
 8000534:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV2;
 8000536:	2308      	movs	r3, #8
 8000538:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV2;
 800053a:	2308      	movs	r3, #8
 800053c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInit.APB3CLKDivider = RCC_HCLK_DIV2;
 800053e:	2308      	movs	r3, #8
 8000540:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInit.APB4CLKDivider = RCC_HCLK_DIV2;
 8000542:	2308      	movs	r3, #8
 8000544:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_4) != HAL_OK) {
 8000546:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800054a:	2104      	movs	r1, #4
 800054c:	4618      	mov	r0, r3
 800054e:	f001 f989 	bl	8001864 <HAL_RCC_ClockConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	bf14      	ite	ne
 8000558:	2301      	movne	r3, #1
 800055a:	2300      	moveq	r3, #0
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d008      	beq.n	8000574 <_Z16SystemInitializev+0x248>
  	return QA_Fail;
 8000562:	2301      	movs	r3, #1
 8000564:	e0ac      	b.n	80006c0 <_Z16SystemInitializev+0x394>
 8000566:	bf00      	nop
 8000568:	e000ed00 	.word	0xe000ed00
 800056c:	58024800 	.word	0x58024800
 8000570:	58000400 	.word	0x58000400
  }


  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000574:	4b54      	ldr	r3, [pc, #336]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 8000576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800057a:	4a53      	ldr	r2, [pc, #332]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000584:	4b50      	ldr	r3, [pc, #320]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 8000586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000590:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000592:	4b4d      	ldr	r3, [pc, #308]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 8000594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000598:	4a4b      	ldr	r2, [pc, #300]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 800059a:	f043 0302 	orr.w	r3, r3, #2
 800059e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005a2:	4b49      	ldr	r3, [pc, #292]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 80005a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a8:	f003 0302 	and.w	r3, r3, #2
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
 80005ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b0:	4b45      	ldr	r3, [pc, #276]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 80005b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b6:	4a44      	ldr	r2, [pc, #272]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005c0:	4b41      	ldr	r3, [pc, #260]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 80005c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	623b      	str	r3, [r7, #32]
 80005cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ce:	4b3e      	ldr	r3, [pc, #248]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 80005d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d4:	4a3c      	ldr	r2, [pc, #240]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 80005d6:	f043 0308 	orr.w	r3, r3, #8
 80005da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005de:	4b3a      	ldr	r3, [pc, #232]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 80005e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005e4:	f003 0308 	and.w	r3, r3, #8
 80005e8:	61fb      	str	r3, [r7, #28]
 80005ea:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ec:	4b36      	ldr	r3, [pc, #216]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 80005ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f2:	4a35      	ldr	r2, [pc, #212]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 80005f4:	f043 0310 	orr.w	r3, r3, #16
 80005f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005fc:	4b32      	ldr	r3, [pc, #200]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 80005fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000602:	f003 0310 	and.w	r3, r3, #16
 8000606:	61bb      	str	r3, [r7, #24]
 8000608:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800060a:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 800060c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000610:	4a2d      	ldr	r2, [pc, #180]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 8000612:	f043 0320 	orr.w	r3, r3, #32
 8000616:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800061a:	4b2b      	ldr	r3, [pc, #172]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 800061c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000620:	f003 0320 	and.w	r3, r3, #32
 8000624:	617b      	str	r3, [r7, #20]
 8000626:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000628:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062e:	4a26      	ldr	r2, [pc, #152]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 8000630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000634:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000638:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 800063a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 8000648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800064c:	4a1e      	ldr	r2, [pc, #120]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 800064e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000652:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 8000658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800065c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 8000666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800066a:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 800066c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000670:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 8000676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800067a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 8000684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000688:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 800068a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800068e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 80006a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a6:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 80006a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <_Z16SystemInitializev+0x39c>)
 80006b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]



  //Return
  return QA_OK;
 80006be:	2300      	movs	r3, #0
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	37a8      	adds	r7, #168	; 0xa8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	58024400 	.word	0x58024400

080006cc <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void  NMI_Handler(void) {
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void  HardFault_Handler(void) {
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0
  while (1) {}
 80006de:	e7fe      	b.n	80006de <HardFault_Handler+0x4>

080006e0 <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void  MemManage_Handler(void) {
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  while (1) {}
 80006e4:	e7fe      	b.n	80006e4 <MemManage_Handler+0x4>

080006e6 <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void  BusFault_Handler(void) {
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  while (1) {}
 80006ea:	e7fe      	b.n	80006ea <BusFault_Handler+0x4>

080006ec <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void  UsageFault_Handler(void) {
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  while (1) {}
 80006f0:	e7fe      	b.n	80006f0 <UsageFault_Handler+0x4>

080006f2 <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void  SVC_Handler(void) {
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void  DebugMon_Handler(void) {
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0

}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void  PendSV_Handler(void) {
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void  SysTick_Handler(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000720:	f000 f970 	bl	8000a04 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000724:	f000 fa7d 	bl	8000c22 <HAL_SYSTICK_IRQHandler>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <main>:
	//------------------------------------------


//main
//Application entry Point
int main(void) {
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0

	//---------------------
  //System Initialization
	if (SystemInitialize()) {
 8000732:	f7ff fdfb 	bl	800032c <_Z16SystemInitializev>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	bf14      	ite	ne
 800073c:	2301      	movne	r3, #1
 800073e:	2300      	moveq	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d000      	beq.n	8000748 <main+0x1c>
		while (1) {}
 8000746:	e7fe      	b.n	8000746 <main+0x1a>
	}

	GPIO_Green_UserLED = new QAD_GPIO_Output(QAD_USERLED_GREEN_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PIN);
 8000748:	2008      	movs	r0, #8
 800074a:	f001 fc1a 	bl	8001f82 <_Znwj>
 800074e:	4603      	mov	r3, r0
 8000750:	461c      	mov	r4, r3
 8000752:	2201      	movs	r2, #1
 8000754:	491c      	ldr	r1, [pc, #112]	; (80007c8 <main+0x9c>)
 8000756:	4620      	mov	r0, r4
 8000758:	f001 fbb4 	bl	8001ec4 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <main+0xa0>)
 800075e:	601c      	str	r4, [r3, #0]

	//---------------
	//Processing Loop
	uint32_t uTicks;
	uint32_t uCurTick;
	uint32_t uNewTick = HAL_GetTick();
 8000760:	f000 f964 	bl	8000a2c <HAL_GetTick>
 8000764:	6138      	str	r0, [r7, #16]
	uint32_t uOldTick = uNewTick;
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	60bb      	str	r3, [r7, #8]
	uint32_t uHeartbeatTicks;

	while (1) {

		//Frame Timing
    uCurTick = HAL_GetTick();
 800076a:	f000 f95f 	bl	8000a2c <HAL_GetTick>
 800076e:	6078      	str	r0, [r7, #4]
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	429a      	cmp	r2, r3
 8000776:	d012      	beq.n	800079e <main+0x72>
    	uOldTick = uNewTick;
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	60bb      	str	r3, [r7, #8]
    	uNewTick = uCurTick;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	613b      	str	r3, [r7, #16]
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 8000780:	693a      	ldr	r2, [r7, #16]
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	429a      	cmp	r2, r3
 8000786:	d205      	bcs.n	8000794 <main+0x68>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 8000788:	693a      	ldr	r2, [r7, #16]
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	3b01      	subs	r3, #1
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	e006      	b.n	80007a2 <main+0x76>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 8000794:	693a      	ldr	r2, [r7, #16]
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	e001      	b.n	80007a2 <main+0x76>
    	}

    } else {
    	uTicks = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
    }


    //Update Heartbeat LED
    uHeartbeatTicks += uTicks;
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	4413      	add	r3, r2
 80007a8:	60fb      	str	r3, [r7, #12]
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) {
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007b0:	d3db      	bcc.n	800076a <main+0x3e>
    	GPIO_Green_UserLED->toggle();
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <main+0xa0>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fbd0 	bl	8001f5c <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80007c2:	60fb      	str	r3, [r7, #12]
    uCurTick = HAL_GetTick();
 80007c4:	e7d1      	b.n	800076a <main+0x3e>
 80007c6:	bf00      	nop
 80007c8:	58020400 	.word	0x58020400
 80007cc:	24000090 	.word	0x24000090

080007d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
	return 1;
 80007d4:	2301      	movs	r3, #1
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <_kill>:

int _kill(int pid, int sig)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80007ea:	f001 fbeb 	bl	8001fc4 <__errno>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2216      	movs	r2, #22
 80007f2:	601a      	str	r2, [r3, #0]
	return -1;
 80007f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <_exit>:

void _exit (int status)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000808:	f04f 31ff 	mov.w	r1, #4294967295
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ffe7 	bl	80007e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000812:	e7fe      	b.n	8000812 <_exit+0x12>

08000814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800081c:	4a14      	ldr	r2, [pc, #80]	; (8000870 <_sbrk+0x5c>)
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <_sbrk+0x60>)
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d102      	bne.n	8000836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <_sbrk+0x64>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <_sbrk+0x68>)
 8000834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <_sbrk+0x64>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	429a      	cmp	r2, r3
 8000842:	d207      	bcs.n	8000854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000844:	f001 fbbe 	bl	8001fc4 <__errno>
 8000848:	4603      	mov	r3, r0
 800084a:	220c      	movs	r2, #12
 800084c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	e009      	b.n	8000868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <_sbrk+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <_sbrk+0x64>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <_sbrk+0x64>)
 8000864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000866:	68fb      	ldr	r3, [r7, #12]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	24080000 	.word	0x24080000
 8000874:	00000400 	.word	0x00000400
 8000878:	24000094 	.word	0x24000094
 800087c:	240000b8 	.word	0x240000b8

08000880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000884:	4b39      	ldr	r3, [pc, #228]	; (800096c <SystemInit+0xec>)
 8000886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800088a:	4a38      	ldr	r2, [pc, #224]	; (800096c <SystemInit+0xec>)
 800088c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000894:	4b36      	ldr	r3, [pc, #216]	; (8000970 <SystemInit+0xf0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f003 030f 	and.w	r3, r3, #15
 800089c:	2b06      	cmp	r3, #6
 800089e:	d807      	bhi.n	80008b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008a0:	4b33      	ldr	r3, [pc, #204]	; (8000970 <SystemInit+0xf0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f023 030f 	bic.w	r3, r3, #15
 80008a8:	4a31      	ldr	r2, [pc, #196]	; (8000970 <SystemInit+0xf0>)
 80008aa:	f043 0307 	orr.w	r3, r3, #7
 80008ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008b0:	4b30      	ldr	r3, [pc, #192]	; (8000974 <SystemInit+0xf4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a2f      	ldr	r2, [pc, #188]	; (8000974 <SystemInit+0xf4>)
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008bc:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <SystemInit+0xf4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008c2:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <SystemInit+0xf4>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	492b      	ldr	r1, [pc, #172]	; (8000974 <SystemInit+0xf4>)
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <SystemInit+0xf8>)
 80008ca:	4013      	ands	r3, r2
 80008cc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008ce:	4b28      	ldr	r3, [pc, #160]	; (8000970 <SystemInit+0xf0>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f003 0308 	and.w	r3, r3, #8
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d007      	beq.n	80008ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008da:	4b25      	ldr	r3, [pc, #148]	; (8000970 <SystemInit+0xf0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f023 030f 	bic.w	r3, r3, #15
 80008e2:	4a23      	ldr	r2, [pc, #140]	; (8000970 <SystemInit+0xf0>)
 80008e4:	f043 0307 	orr.w	r3, r3, #7
 80008e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80008ea:	4b22      	ldr	r3, [pc, #136]	; (8000974 <SystemInit+0xf4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80008f0:	4b20      	ldr	r3, [pc, #128]	; (8000974 <SystemInit+0xf4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <SystemInit+0xf4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <SystemInit+0xf4>)
 80008fe:	4a1f      	ldr	r2, [pc, #124]	; (800097c <SystemInit+0xfc>)
 8000900:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <SystemInit+0xf4>)
 8000904:	4a1e      	ldr	r2, [pc, #120]	; (8000980 <SystemInit+0x100>)
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000908:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <SystemInit+0xf4>)
 800090a:	4a1e      	ldr	r2, [pc, #120]	; (8000984 <SystemInit+0x104>)
 800090c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <SystemInit+0xf4>)
 8000910:	2200      	movs	r2, #0
 8000912:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <SystemInit+0xf4>)
 8000916:	4a1b      	ldr	r2, [pc, #108]	; (8000984 <SystemInit+0x104>)
 8000918:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <SystemInit+0xf4>)
 800091c:	2200      	movs	r2, #0
 800091e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <SystemInit+0xf4>)
 8000922:	4a18      	ldr	r2, [pc, #96]	; (8000984 <SystemInit+0x104>)
 8000924:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <SystemInit+0xf4>)
 8000928:	2200      	movs	r2, #0
 800092a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <SystemInit+0xf4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a10      	ldr	r2, [pc, #64]	; (8000974 <SystemInit+0xf4>)
 8000932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000936:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <SystemInit+0xf4>)
 800093a:	2200      	movs	r2, #0
 800093c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <SystemInit+0x108>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <SystemInit+0x10c>)
 8000944:	4013      	ands	r3, r2
 8000946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800094a:	d202      	bcs.n	8000952 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800094c:	4b10      	ldr	r3, [pc, #64]	; (8000990 <SystemInit+0x110>)
 800094e:	2201      	movs	r2, #1
 8000950:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <SystemInit+0x114>)
 8000954:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000958:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <SystemInit+0xec>)
 800095c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000960:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000ed00 	.word	0xe000ed00
 8000970:	52002000 	.word	0x52002000
 8000974:	58024400 	.word	0x58024400
 8000978:	eaf6ed7f 	.word	0xeaf6ed7f
 800097c:	02020200 	.word	0x02020200
 8000980:	01ff0000 	.word	0x01ff0000
 8000984:	01010280 	.word	0x01010280
 8000988:	5c001000 	.word	0x5c001000
 800098c:	ffff0000 	.word	0xffff0000
 8000990:	51008108 	.word	0x51008108
 8000994:	52004000 	.word	0x52004000

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_InitTick+0x60>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d101      	bne.n	80009ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	e021      	b.n	80009f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <HAL_InitTick+0x64>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <HAL_InitTick+0x60>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f921 	bl	8000c0a <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00e      	b.n	80009f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d80a      	bhi.n	80009ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295
 80009e0:	f000 f8f9 	bl	8000bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <HAL_InitTick+0x68>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2400000c 	.word	0x2400000c
 80009fc:	24000000 	.word	0x24000000
 8000a00:	24000008 	.word	0x24000008

08000a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_IncTick+0x20>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_IncTick+0x24>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <HAL_IncTick+0x24>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	2400000c 	.word	0x2400000c
 8000a28:	240000a4 	.word	0x240000a4

08000a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <HAL_GetTick+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	240000a4 	.word	0x240000a4

08000a44 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <HAL_GetREVID+0x14>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	0c1b      	lsrs	r3, r3, #16
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	5c001000 	.word	0x5c001000

08000a5c <__NVIC_SetPriorityGrouping>:
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <__NVIC_SetPriorityGrouping+0x40>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a86:	4313      	orrs	r3, r2
 8000a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8a:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <__NVIC_SetPriorityGrouping+0x40>)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	60d3      	str	r3, [r2, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00
 8000aa0:	05fa0000 	.word	0x05fa0000

08000aa4 <__NVIC_GetPriorityGrouping>:
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <__NVIC_GetPriorityGrouping+0x18>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	f003 0307 	and.w	r3, r3, #7
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_SetPriority>:
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000acc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db0a      	blt.n	8000aea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	490c      	ldr	r1, [pc, #48]	; (8000b0c <__NVIC_SetPriority+0x4c>)
 8000ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ade:	0112      	lsls	r2, r2, #4
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ae8:	e00a      	b.n	8000b00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4908      	ldr	r1, [pc, #32]	; (8000b10 <__NVIC_SetPriority+0x50>)
 8000af0:	88fb      	ldrh	r3, [r7, #6]
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	3b04      	subs	r3, #4
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	440b      	add	r3, r1
 8000afe:	761a      	strb	r2, [r3, #24]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <NVIC_EncodePriority>:
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	bf28      	it	cs
 8000b32:	2304      	movcs	r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d902      	bls.n	8000b44 <NVIC_EncodePriority+0x30>
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3b03      	subs	r3, #3
 8000b42:	e000      	b.n	8000b46 <NVIC_EncodePriority+0x32>
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43da      	mvns	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43d9      	mvns	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	4313      	orrs	r3, r2
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b8c:	d301      	bcc.n	8000b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e00f      	b.n	8000bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <SysTick_Config+0x40>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9a:	210f      	movs	r1, #15
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	f7ff ff8e 	bl	8000ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <SysTick_Config+0x40>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <SysTick_Config+0x40>)
 8000bac:	2207      	movs	r2, #7
 8000bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	e000e010 	.word	0xe000e010

08000bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff ff47 	bl	8000a5c <__NVIC_SetPriorityGrouping>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b086      	sub	sp, #24
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000be4:	f7ff ff5e 	bl	8000aa4 <__NVIC_GetPriorityGrouping>
 8000be8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	68b9      	ldr	r1, [r7, #8]
 8000bee:	6978      	ldr	r0, [r7, #20]
 8000bf0:	f7ff ff90 	bl	8000b14 <NVIC_EncodePriority>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff5f 	bl	8000ac0 <__NVIC_SetPriority>
}
 8000c02:	bf00      	nop
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff ffb2 	bl	8000b7c <SysTick_Config>
 8000c18:	4603      	mov	r3, r0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000c26:	f000 f802 	bl	8000c2e <HAL_SYSTICK_Callback>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c4a:	4b89      	ldr	r3, [pc, #548]	; (8000e70 <HAL_GPIO_Init+0x234>)
 8000c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c4e:	e194      	b.n	8000f7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	2101      	movs	r1, #1
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 8186 	beq.w	8000f74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d00b      	beq.n	8000c88 <HAL_GPIO_Init+0x4c>
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d007      	beq.n	8000c88 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c7c:	2b11      	cmp	r3, #17
 8000c7e:	d003      	beq.n	8000c88 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b12      	cmp	r3, #18
 8000c86:	d130      	bne.n	8000cea <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	2203      	movs	r2, #3
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	091b      	lsrs	r3, r3, #4
 8000cd4:	f003 0201 	and.w	r2, r3, #1
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0xee>
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b12      	cmp	r3, #18
 8000d28:	d123      	bne.n	8000d72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	08da      	lsrs	r2, r3, #3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3208      	adds	r2, #8
 8000d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	691a      	ldr	r2, [r3, #16]
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	08da      	lsrs	r2, r3, #3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3208      	adds	r2, #8
 8000d6c:	69b9      	ldr	r1, [r7, #24]
 8000d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0203 	and.w	r2, r3, #3
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 80e0 	beq.w	8000f74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db4:	4b2f      	ldr	r3, [pc, #188]	; (8000e74 <HAL_GPIO_Init+0x238>)
 8000db6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dba:	4a2e      	ldr	r2, [pc, #184]	; (8000e74 <HAL_GPIO_Init+0x238>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dc4:	4b2b      	ldr	r3, [pc, #172]	; (8000e74 <HAL_GPIO_Init+0x238>)
 8000dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dd2:	4a29      	ldr	r2, [pc, #164]	; (8000e78 <HAL_GPIO_Init+0x23c>)
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	089b      	lsrs	r3, r3, #2
 8000dd8:	3302      	adds	r3, #2
 8000dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	220f      	movs	r2, #15
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <HAL_GPIO_Init+0x240>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d052      	beq.n	8000ea4 <HAL_GPIO_Init+0x268>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a1f      	ldr	r2, [pc, #124]	; (8000e80 <HAL_GPIO_Init+0x244>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d031      	beq.n	8000e6a <HAL_GPIO_Init+0x22e>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <HAL_GPIO_Init+0x248>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d02b      	beq.n	8000e66 <HAL_GPIO_Init+0x22a>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a1d      	ldr	r2, [pc, #116]	; (8000e88 <HAL_GPIO_Init+0x24c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d025      	beq.n	8000e62 <HAL_GPIO_Init+0x226>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a1c      	ldr	r2, [pc, #112]	; (8000e8c <HAL_GPIO_Init+0x250>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d01f      	beq.n	8000e5e <HAL_GPIO_Init+0x222>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a1b      	ldr	r2, [pc, #108]	; (8000e90 <HAL_GPIO_Init+0x254>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d019      	beq.n	8000e5a <HAL_GPIO_Init+0x21e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <HAL_GPIO_Init+0x258>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d013      	beq.n	8000e56 <HAL_GPIO_Init+0x21a>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a19      	ldr	r2, [pc, #100]	; (8000e98 <HAL_GPIO_Init+0x25c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00d      	beq.n	8000e52 <HAL_GPIO_Init+0x216>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <HAL_GPIO_Init+0x260>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x212>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a17      	ldr	r2, [pc, #92]	; (8000ea0 <HAL_GPIO_Init+0x264>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <HAL_GPIO_Init+0x20e>
 8000e46:	2309      	movs	r3, #9
 8000e48:	e02d      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e4a:	230a      	movs	r3, #10
 8000e4c:	e02b      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e4e:	2308      	movs	r3, #8
 8000e50:	e029      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e52:	2307      	movs	r3, #7
 8000e54:	e027      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e56:	2306      	movs	r3, #6
 8000e58:	e025      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	e023      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e5e:	2304      	movs	r3, #4
 8000e60:	e021      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e62:	2303      	movs	r3, #3
 8000e64:	e01f      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e66:	2302      	movs	r3, #2
 8000e68:	e01d      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e01b      	b.n	8000ea6 <HAL_GPIO_Init+0x26a>
 8000e6e:	bf00      	nop
 8000e70:	58000080 	.word	0x58000080
 8000e74:	58024400 	.word	0x58024400
 8000e78:	58000400 	.word	0x58000400
 8000e7c:	58020000 	.word	0x58020000
 8000e80:	58020400 	.word	0x58020400
 8000e84:	58020800 	.word	0x58020800
 8000e88:	58020c00 	.word	0x58020c00
 8000e8c:	58021000 	.word	0x58021000
 8000e90:	58021400 	.word	0x58021400
 8000e94:	58021800 	.word	0x58021800
 8000e98:	58021c00 	.word	0x58021c00
 8000e9c:	58022000 	.word	0x58022000
 8000ea0:	58022400 	.word	0x58022400
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	69fa      	ldr	r2, [r7, #28]
 8000ea8:	f002 0203 	and.w	r2, r2, #3
 8000eac:	0092      	lsls	r2, r2, #2
 8000eae:	4093      	lsls	r3, r2
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb6:	4938      	ldr	r1, [pc, #224]	; (8000f98 <HAL_GPIO_Init+0x35c>)
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	3301      	adds	r3, #1
 8000f78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa22 f303 	lsr.w	r3, r2, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f47f ae63 	bne.w	8000c50 <HAL_GPIO_Init+0x14>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	3724      	adds	r7, #36	; 0x24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	58000400 	.word	0x58000400

08000f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fac:	787b      	ldrb	r3, [r7, #1]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000fb8:	e003      	b.n	8000fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fba:	887b      	ldrh	r3, [r7, #2]
 8000fbc:	041a      	lsls	r2, r3, #16
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	619a      	str	r2, [r3, #24]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <HAL_PWREx_ConfigSupply+0x70>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d00a      	beq.n	8000ffa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <HAL_PWREx_ConfigSupply+0x70>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	f003 0307 	and.w	r3, r3, #7
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d001      	beq.n	8000ff6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e01f      	b.n	8001036 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e01d      	b.n	8001036 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_PWREx_ConfigSupply+0x70>)
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	f023 0207 	bic.w	r2, r3, #7
 8001002:	490f      	ldr	r1, [pc, #60]	; (8001040 <HAL_PWREx_ConfigSupply+0x70>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4313      	orrs	r3, r2
 8001008:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800100a:	f7ff fd0f 	bl	8000a2c <HAL_GetTick>
 800100e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001010:	e009      	b.n	8001026 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001012:	f7ff fd0b 	bl	8000a2c <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001020:	d901      	bls.n	8001026 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e007      	b.n	8001036 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_PWREx_ConfigSupply+0x70>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800102e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001032:	d1ee      	bne.n	8001012 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	58024800 	.word	0x58024800

08001044 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	; 0x30
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e3ff      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 8087 	beq.w	8001172 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001064:	4b99      	ldr	r3, [pc, #612]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800106e:	4b97      	ldr	r3, [pc, #604]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 8001070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001076:	2b10      	cmp	r3, #16
 8001078:	d007      	beq.n	800108a <HAL_RCC_OscConfig+0x46>
 800107a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107c:	2b18      	cmp	r3, #24
 800107e:	d110      	bne.n	80010a2 <HAL_RCC_OscConfig+0x5e>
 8001080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d10b      	bne.n	80010a2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108a:	4b90      	ldr	r3, [pc, #576]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d06c      	beq.n	8001170 <HAL_RCC_OscConfig+0x12c>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d168      	bne.n	8001170 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e3d9      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010aa:	d106      	bne.n	80010ba <HAL_RCC_OscConfig+0x76>
 80010ac:	4b87      	ldr	r3, [pc, #540]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a86      	ldr	r2, [pc, #536]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 80010b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	e02e      	b.n	8001118 <HAL_RCC_OscConfig+0xd4>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10c      	bne.n	80010dc <HAL_RCC_OscConfig+0x98>
 80010c2:	4b82      	ldr	r3, [pc, #520]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a81      	ldr	r2, [pc, #516]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 80010c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	4b7f      	ldr	r3, [pc, #508]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a7e      	ldr	r2, [pc, #504]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 80010d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e01d      	b.n	8001118 <HAL_RCC_OscConfig+0xd4>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010e4:	d10c      	bne.n	8001100 <HAL_RCC_OscConfig+0xbc>
 80010e6:	4b79      	ldr	r3, [pc, #484]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a78      	ldr	r2, [pc, #480]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 80010ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	4b76      	ldr	r3, [pc, #472]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a75      	ldr	r2, [pc, #468]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 80010f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	e00b      	b.n	8001118 <HAL_RCC_OscConfig+0xd4>
 8001100:	4b72      	ldr	r3, [pc, #456]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a71      	ldr	r2, [pc, #452]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 8001106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b6f      	ldr	r3, [pc, #444]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a6e      	ldr	r2, [pc, #440]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 8001112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d013      	beq.n	8001148 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001120:	f7ff fc84 	bl	8000a2c <HAL_GetTick>
 8001124:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001128:	f7ff fc80 	bl	8000a2c <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b64      	cmp	r3, #100	; 0x64
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e38d      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800113a:	4b64      	ldr	r3, [pc, #400]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0xe4>
 8001146:	e014      	b.n	8001172 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001148:	f7ff fc70 	bl	8000a2c <HAL_GetTick>
 800114c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001150:	f7ff fc6c 	bl	8000a2c <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b64      	cmp	r3, #100	; 0x64
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e379      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001162:	4b5a      	ldr	r3, [pc, #360]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x10c>
 800116e:	e000      	b.n	8001172 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 80ae 	beq.w	80012dc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001180:	4b52      	ldr	r3, [pc, #328]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001188:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800118a:	4b50      	ldr	r3, [pc, #320]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 800118c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d007      	beq.n	80011a6 <HAL_RCC_OscConfig+0x162>
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	2b18      	cmp	r3, #24
 800119a:	d13a      	bne.n	8001212 <HAL_RCC_OscConfig+0x1ce>
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d135      	bne.n	8001212 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011a6:	4b49      	ldr	r3, [pc, #292]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d005      	beq.n	80011be <HAL_RCC_OscConfig+0x17a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e34b      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011be:	f7ff fc41 	bl	8000a44 <HAL_GetREVID>
 80011c2:	4603      	mov	r3, r0
 80011c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d817      	bhi.n	80011fc <HAL_RCC_OscConfig+0x1b8>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	2b40      	cmp	r3, #64	; 0x40
 80011d2:	d108      	bne.n	80011e6 <HAL_RCC_OscConfig+0x1a2>
 80011d4:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80011dc:	4a3b      	ldr	r2, [pc, #236]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 80011de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011e4:	e07a      	b.n	80012dc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e6:	4b39      	ldr	r3, [pc, #228]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	031b      	lsls	r3, r3, #12
 80011f4:	4935      	ldr	r1, [pc, #212]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011fa:	e06f      	b.n	80012dc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fc:	4b33      	ldr	r3, [pc, #204]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	061b      	lsls	r3, r3, #24
 800120a:	4930      	ldr	r1, [pc, #192]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 800120c:	4313      	orrs	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001210:	e064      	b.n	80012dc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d045      	beq.n	80012a6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800121a:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f023 0219 	bic.w	r2, r3, #25
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	4929      	ldr	r1, [pc, #164]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 8001228:	4313      	orrs	r3, r2
 800122a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122c:	f7ff fbfe 	bl	8000a2c <HAL_GetTick>
 8001230:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001234:	f7ff fbfa 	bl	8000a2c <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e307      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	f7ff fbf7 	bl	8000a44 <HAL_GetREVID>
 8001256:	4603      	mov	r3, r0
 8001258:	f241 0203 	movw	r2, #4099	; 0x1003
 800125c:	4293      	cmp	r3, r2
 800125e:	d817      	bhi.n	8001290 <HAL_RCC_OscConfig+0x24c>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	2b40      	cmp	r3, #64	; 0x40
 8001266:	d108      	bne.n	800127a <HAL_RCC_OscConfig+0x236>
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001270:	4a16      	ldr	r2, [pc, #88]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 8001272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001276:	6053      	str	r3, [r2, #4]
 8001278:	e030      	b.n	80012dc <HAL_RCC_OscConfig+0x298>
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	031b      	lsls	r3, r3, #12
 8001288:	4910      	ldr	r1, [pc, #64]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 800128a:	4313      	orrs	r3, r2
 800128c:	604b      	str	r3, [r1, #4]
 800128e:	e025      	b.n	80012dc <HAL_RCC_OscConfig+0x298>
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	061b      	lsls	r3, r3, #24
 800129e:	490b      	ldr	r1, [pc, #44]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	604b      	str	r3, [r1, #4]
 80012a4:	e01a      	b.n	80012dc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_RCC_OscConfig+0x288>)
 80012ac:	f023 0301 	bic.w	r3, r3, #1
 80012b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b2:	f7ff fbbb 	bl	8000a2c <HAL_GetTick>
 80012b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012b8:	e00a      	b.n	80012d0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ba:	f7ff fbb7 	bl	8000a2c <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d903      	bls.n	80012d0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e2c4      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
 80012cc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012d0:	4ba4      	ldr	r3, [pc, #656]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1ee      	bne.n	80012ba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80a9 	beq.w	800143c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ea:	4b9e      	ldr	r3, [pc, #632]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012f4:	4b9b      	ldr	r3, [pc, #620]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 80012f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d007      	beq.n	8001310 <HAL_RCC_OscConfig+0x2cc>
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	2b18      	cmp	r3, #24
 8001304:	d13a      	bne.n	800137c <HAL_RCC_OscConfig+0x338>
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2b01      	cmp	r3, #1
 800130e:	d135      	bne.n	800137c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001310:	4b94      	ldr	r3, [pc, #592]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <HAL_RCC_OscConfig+0x2e4>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	2b80      	cmp	r3, #128	; 0x80
 8001322:	d001      	beq.n	8001328 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e296      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001328:	f7ff fb8c 	bl	8000a44 <HAL_GetREVID>
 800132c:	4603      	mov	r3, r0
 800132e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001332:	4293      	cmp	r3, r2
 8001334:	d817      	bhi.n	8001366 <HAL_RCC_OscConfig+0x322>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	2b20      	cmp	r3, #32
 800133c:	d108      	bne.n	8001350 <HAL_RCC_OscConfig+0x30c>
 800133e:	4b89      	ldr	r3, [pc, #548]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001346:	4a87      	ldr	r2, [pc, #540]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 8001348:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800134c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800134e:	e075      	b.n	800143c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001350:	4b84      	ldr	r3, [pc, #528]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	069b      	lsls	r3, r3, #26
 800135e:	4981      	ldr	r1, [pc, #516]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001364:	e06a      	b.n	800143c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001366:	4b7f      	ldr	r3, [pc, #508]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	061b      	lsls	r3, r3, #24
 8001374:	497b      	ldr	r1, [pc, #492]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 8001376:	4313      	orrs	r3, r2
 8001378:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800137a:	e05f      	b.n	800143c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d042      	beq.n	800140a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001384:	4b77      	ldr	r3, [pc, #476]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a76      	ldr	r2, [pc, #472]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 800138a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800138e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff fb4c 	bl	8000a2c <HAL_GetTick>
 8001394:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001398:	f7ff fb48 	bl	8000a2c <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e255      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013aa:	4b6e      	ldr	r3, [pc, #440]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013b6:	f7ff fb45 	bl	8000a44 <HAL_GetREVID>
 80013ba:	4603      	mov	r3, r0
 80013bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d817      	bhi.n	80013f4 <HAL_RCC_OscConfig+0x3b0>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	2b20      	cmp	r3, #32
 80013ca:	d108      	bne.n	80013de <HAL_RCC_OscConfig+0x39a>
 80013cc:	4b65      	ldr	r3, [pc, #404]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80013d4:	4a63      	ldr	r2, [pc, #396]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 80013d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013da:	6053      	str	r3, [r2, #4]
 80013dc:	e02e      	b.n	800143c <HAL_RCC_OscConfig+0x3f8>
 80013de:	4b61      	ldr	r3, [pc, #388]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	069b      	lsls	r3, r3, #26
 80013ec:	495d      	ldr	r1, [pc, #372]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	604b      	str	r3, [r1, #4]
 80013f2:	e023      	b.n	800143c <HAL_RCC_OscConfig+0x3f8>
 80013f4:	4b5b      	ldr	r3, [pc, #364]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	061b      	lsls	r3, r3, #24
 8001402:	4958      	ldr	r1, [pc, #352]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 8001404:	4313      	orrs	r3, r2
 8001406:	60cb      	str	r3, [r1, #12]
 8001408:	e018      	b.n	800143c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800140a:	4b56      	ldr	r3, [pc, #344]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a55      	ldr	r2, [pc, #340]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 8001410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001416:	f7ff fb09 	bl	8000a2c <HAL_GetTick>
 800141a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800141e:	f7ff fb05 	bl	8000a2c <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e212      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001430:	4b4c      	ldr	r3, [pc, #304]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f0      	bne.n	800141e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	2b00      	cmp	r3, #0
 8001446:	d036      	beq.n	80014b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d019      	beq.n	8001484 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001450:	4b44      	ldr	r3, [pc, #272]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 8001452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001454:	4a43      	ldr	r2, [pc, #268]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145c:	f7ff fae6 	bl	8000a2c <HAL_GetTick>
 8001460:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001464:	f7ff fae2 	bl	8000a2c <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e1ef      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001476:	4b3b      	ldr	r3, [pc, #236]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 8001478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x420>
 8001482:	e018      	b.n	80014b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001484:	4b37      	ldr	r3, [pc, #220]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 8001486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001488:	4a36      	ldr	r2, [pc, #216]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 800148a:	f023 0301 	bic.w	r3, r3, #1
 800148e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001490:	f7ff facc 	bl	8000a2c <HAL_GetTick>
 8001494:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001498:	f7ff fac8 	bl	8000a2c <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e1d5      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014aa:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 80014ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0320 	and.w	r3, r3, #32
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d036      	beq.n	8001530 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d019      	beq.n	80014fe <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a25      	ldr	r2, [pc, #148]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 80014d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80014d6:	f7ff faa9 	bl	8000a2c <HAL_GetTick>
 80014da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80014de:	f7ff faa5 	bl	8000a2c <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e1b2      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014f0:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x49a>
 80014fc:	e018      	b.n	8001530 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a18      	ldr	r2, [pc, #96]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 8001504:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001508:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800150a:	f7ff fa8f 	bl	8000a2c <HAL_GetTick>
 800150e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001512:	f7ff fa8b 	bl	8000a2c <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e198      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_RCC_OscConfig+0x520>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f0      	bne.n	8001512 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 8085 	beq.w	8001648 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_RCC_OscConfig+0x524>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <HAL_RCC_OscConfig+0x524>)
 8001544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001548:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800154a:	f7ff fa6f 	bl	8000a2c <HAL_GetTick>
 800154e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001550:	e00c      	b.n	800156c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001552:	f7ff fa6b 	bl	8000a2c <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b64      	cmp	r3, #100	; 0x64
 800155e:	d905      	bls.n	800156c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e178      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
 8001564:	58024400 	.word	0x58024400
 8001568:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800156c:	4b96      	ldr	r3, [pc, #600]	; (80017c8 <HAL_RCC_OscConfig+0x784>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0ec      	beq.n	8001552 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d106      	bne.n	800158e <HAL_RCC_OscConfig+0x54a>
 8001580:	4b92      	ldr	r3, [pc, #584]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001584:	4a91      	ldr	r2, [pc, #580]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6713      	str	r3, [r2, #112]	; 0x70
 800158c:	e02d      	b.n	80015ea <HAL_RCC_OscConfig+0x5a6>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x56c>
 8001596:	4b8d      	ldr	r3, [pc, #564]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159a:	4a8c      	ldr	r2, [pc, #560]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	6713      	str	r3, [r2, #112]	; 0x70
 80015a2:	4b8a      	ldr	r3, [pc, #552]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 80015a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a6:	4a89      	ldr	r2, [pc, #548]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 80015a8:	f023 0304 	bic.w	r3, r3, #4
 80015ac:	6713      	str	r3, [r2, #112]	; 0x70
 80015ae:	e01c      	b.n	80015ea <HAL_RCC_OscConfig+0x5a6>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b05      	cmp	r3, #5
 80015b6:	d10c      	bne.n	80015d2 <HAL_RCC_OscConfig+0x58e>
 80015b8:	4b84      	ldr	r3, [pc, #528]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 80015ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015bc:	4a83      	ldr	r2, [pc, #524]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 80015be:	f043 0304 	orr.w	r3, r3, #4
 80015c2:	6713      	str	r3, [r2, #112]	; 0x70
 80015c4:	4b81      	ldr	r3, [pc, #516]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c8:	4a80      	ldr	r2, [pc, #512]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6713      	str	r3, [r2, #112]	; 0x70
 80015d0:	e00b      	b.n	80015ea <HAL_RCC_OscConfig+0x5a6>
 80015d2:	4b7e      	ldr	r3, [pc, #504]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d6:	4a7d      	ldr	r2, [pc, #500]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	6713      	str	r3, [r2, #112]	; 0x70
 80015de:	4b7b      	ldr	r3, [pc, #492]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 80015e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e2:	4a7a      	ldr	r2, [pc, #488]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 80015e4:	f023 0304 	bic.w	r3, r3, #4
 80015e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d015      	beq.n	800161e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f2:	f7ff fa1b 	bl	8000a2c <HAL_GetTick>
 80015f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff fa17 	bl	8000a2c <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	; 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e122      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001610:	4b6e      	ldr	r3, [pc, #440]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0ee      	beq.n	80015fa <HAL_RCC_OscConfig+0x5b6>
 800161c:	e014      	b.n	8001648 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161e:	f7ff fa05 	bl	8000a2c <HAL_GetTick>
 8001622:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001624:	e00a      	b.n	800163c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001626:	f7ff fa01 	bl	8000a2c <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	f241 3288 	movw	r2, #5000	; 0x1388
 8001634:	4293      	cmp	r3, r2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e10c      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800163c:	4b63      	ldr	r3, [pc, #396]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 800163e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1ee      	bne.n	8001626 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 8101 	beq.w	8001854 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001652:	4b5e      	ldr	r3, [pc, #376]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800165a:	2b18      	cmp	r3, #24
 800165c:	f000 80bc 	beq.w	80017d8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	2b02      	cmp	r3, #2
 8001666:	f040 8095 	bne.w	8001794 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b58      	ldr	r3, [pc, #352]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a57      	ldr	r2, [pc, #348]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 8001670:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001676:	f7ff f9d9 	bl	8000a2c <HAL_GetTick>
 800167a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff f9d5 	bl	8000a2c <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e0e2      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001690:	4b4e      	ldr	r3, [pc, #312]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800169c:	4b4b      	ldr	r3, [pc, #300]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 800169e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a0:	4b4b      	ldr	r3, [pc, #300]	; (80017d0 <HAL_RCC_OscConfig+0x78c>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	430a      	orrs	r2, r1
 80016b0:	4946      	ldr	r1, [pc, #280]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	628b      	str	r3, [r1, #40]	; 0x28
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	3b01      	subs	r3, #1
 80016bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c4:	3b01      	subs	r3, #1
 80016c6:	025b      	lsls	r3, r3, #9
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d0:	3b01      	subs	r3, #1
 80016d2:	041b      	lsls	r3, r3, #16
 80016d4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016de:	3b01      	subs	r3, #1
 80016e0:	061b      	lsls	r3, r3, #24
 80016e2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80016e6:	4939      	ldr	r1, [pc, #228]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80016ec:	4b37      	ldr	r3, [pc, #220]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	4a36      	ldr	r2, [pc, #216]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 80016f2:	f023 0301 	bic.w	r3, r3, #1
 80016f6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80016f8:	4b34      	ldr	r3, [pc, #208]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 80016fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016fc:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <HAL_RCC_OscConfig+0x790>)
 80016fe:	4013      	ands	r3, r2
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001704:	00d2      	lsls	r2, r2, #3
 8001706:	4931      	ldr	r1, [pc, #196]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 8001708:	4313      	orrs	r3, r2
 800170a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800170c:	4b2f      	ldr	r3, [pc, #188]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	f023 020c 	bic.w	r2, r3, #12
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	492c      	ldr	r1, [pc, #176]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 800171a:	4313      	orrs	r3, r2
 800171c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800171e:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	f023 0202 	bic.w	r2, r3, #2
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	4928      	ldr	r1, [pc, #160]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 800172c:	4313      	orrs	r3, r2
 800172e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001730:	4b26      	ldr	r3, [pc, #152]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	4a25      	ldr	r2, [pc, #148]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 8001736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800173c:	4b23      	ldr	r3, [pc, #140]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	4a22      	ldr	r2, [pc, #136]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 8001742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001746:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001748:	4b20      	ldr	r3, [pc, #128]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	4a1f      	ldr	r2, [pc, #124]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 800174e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001754:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	4a1c      	ldr	r2, [pc, #112]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a19      	ldr	r2, [pc, #100]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 8001766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800176a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176c:	f7ff f95e 	bl	8000a2c <HAL_GetTick>
 8001770:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001774:	f7ff f95a 	bl	8000a2c <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e067      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x730>
 8001792:	e05f      	b.n	8001854 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001794:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0c      	ldr	r2, [pc, #48]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 800179a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800179e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7ff f944 	bl	8000a2c <HAL_GetTick>
 80017a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a8:	f7ff f940 	bl	8000a2c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e04d      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017ba:	4b04      	ldr	r3, [pc, #16]	; (80017cc <HAL_RCC_OscConfig+0x788>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x764>
 80017c6:	e045      	b.n	8001854 <HAL_RCC_OscConfig+0x810>
 80017c8:	58024800 	.word	0x58024800
 80017cc:	58024400 	.word	0x58024400
 80017d0:	fffffc0c 	.word	0xfffffc0c
 80017d4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80017d8:	4b21      	ldr	r3, [pc, #132]	; (8001860 <HAL_RCC_OscConfig+0x81c>)
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <HAL_RCC_OscConfig+0x81c>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d031      	beq.n	8001850 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f003 0203 	and.w	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d12a      	bne.n	8001850 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d122      	bne.n	8001850 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d11a      	bne.n	8001850 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	0a5b      	lsrs	r3, r3, #9
 800181e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001826:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001828:	429a      	cmp	r2, r3
 800182a:	d111      	bne.n	8001850 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	0c1b      	lsrs	r3, r3, #16
 8001830:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001838:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d108      	bne.n	8001850 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	0e1b      	lsrs	r3, r3, #24
 8001842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d001      	beq.n	8001854 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3730      	adds	r7, #48	; 0x30
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	58024400 	.word	0x58024400

08001864 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e19c      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b8a      	ldr	r3, [pc, #552]	; (8001aa4 <HAL_RCC_ClockConfig+0x240>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d910      	bls.n	80018a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b87      	ldr	r3, [pc, #540]	; (8001aa4 <HAL_RCC_ClockConfig+0x240>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 020f 	bic.w	r2, r3, #15
 800188e:	4985      	ldr	r1, [pc, #532]	; (8001aa4 <HAL_RCC_ClockConfig+0x240>)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b83      	ldr	r3, [pc, #524]	; (8001aa4 <HAL_RCC_ClockConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e184      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d010      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	4b7b      	ldr	r3, [pc, #492]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d908      	bls.n	80018d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80018c4:	4b78      	ldr	r3, [pc, #480]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	4975      	ldr	r1, [pc, #468]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d010      	beq.n	8001904 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	4b70      	ldr	r3, [pc, #448]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d908      	bls.n	8001904 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80018f2:	4b6d      	ldr	r3, [pc, #436]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	496a      	ldr	r1, [pc, #424]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 8001900:	4313      	orrs	r3, r2
 8001902:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	2b00      	cmp	r3, #0
 800190e:	d010      	beq.n	8001932 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	699a      	ldr	r2, [r3, #24]
 8001914:	4b64      	ldr	r3, [pc, #400]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800191c:	429a      	cmp	r2, r3
 800191e:	d908      	bls.n	8001932 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001920:	4b61      	ldr	r3, [pc, #388]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	495e      	ldr	r1, [pc, #376]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 800192e:	4313      	orrs	r3, r2
 8001930:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	2b00      	cmp	r3, #0
 800193c:	d010      	beq.n	8001960 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69da      	ldr	r2, [r3, #28]
 8001942:	4b59      	ldr	r3, [pc, #356]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800194a:	429a      	cmp	r2, r3
 800194c:	d908      	bls.n	8001960 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800194e:	4b56      	ldr	r3, [pc, #344]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4953      	ldr	r1, [pc, #332]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 800195c:	4313      	orrs	r3, r2
 800195e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d010      	beq.n	800198e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	4b4d      	ldr	r3, [pc, #308]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 030f 	and.w	r3, r3, #15
 8001978:	429a      	cmp	r2, r3
 800197a:	d908      	bls.n	800198e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800197c:	4b4a      	ldr	r3, [pc, #296]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f023 020f 	bic.w	r2, r3, #15
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4947      	ldr	r1, [pc, #284]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 800198a:	4313      	orrs	r3, r2
 800198c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d055      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800199a:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	4940      	ldr	r1, [pc, #256]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d107      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019b4:	4b3c      	ldr	r3, [pc, #240]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d121      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0f6      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d107      	bne.n	80019dc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019cc:	4b36      	ldr	r3, [pc, #216]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d115      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0ea      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019e4:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d109      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0de      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019f4:	4b2c      	ldr	r3, [pc, #176]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0d6      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	f023 0207 	bic.w	r2, r3, #7
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4925      	ldr	r1, [pc, #148]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a16:	f7ff f809 	bl	8000a2c <HAL_GetTick>
 8001a1a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1e:	f7ff f805 	bl	8000a2c <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e0be      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a34:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d1eb      	bne.n	8001a1e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d010      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d208      	bcs.n	8001a74 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f023 020f 	bic.w	r2, r3, #15
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	490e      	ldr	r1, [pc, #56]	; (8001aa8 <HAL_RCC_ClockConfig+0x244>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_ClockConfig+0x240>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d214      	bcs.n	8001aac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_RCC_ClockConfig+0x240>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 020f 	bic.w	r2, r3, #15
 8001a8a:	4906      	ldr	r1, [pc, #24]	; (8001aa4 <HAL_RCC_ClockConfig+0x240>)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <HAL_RCC_ClockConfig+0x240>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e086      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x34e>
 8001aa4:	52002000 	.word	0x52002000
 8001aa8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d010      	beq.n	8001ada <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	4b3f      	ldr	r3, [pc, #252]	; (8001bbc <HAL_RCC_ClockConfig+0x358>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d208      	bcs.n	8001ada <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ac8:	4b3c      	ldr	r3, [pc, #240]	; (8001bbc <HAL_RCC_ClockConfig+0x358>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	4939      	ldr	r1, [pc, #228]	; (8001bbc <HAL_RCC_ClockConfig+0x358>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d010      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <HAL_RCC_ClockConfig+0x358>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d208      	bcs.n	8001b08 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001af6:	4b31      	ldr	r3, [pc, #196]	; (8001bbc <HAL_RCC_ClockConfig+0x358>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	492e      	ldr	r1, [pc, #184]	; (8001bbc <HAL_RCC_ClockConfig+0x358>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0310 	and.w	r3, r3, #16
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d010      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699a      	ldr	r2, [r3, #24]
 8001b18:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <HAL_RCC_ClockConfig+0x358>)
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d208      	bcs.n	8001b36 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b24:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <HAL_RCC_ClockConfig+0x358>)
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4922      	ldr	r1, [pc, #136]	; (8001bbc <HAL_RCC_ClockConfig+0x358>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0320 	and.w	r3, r3, #32
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d010      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69da      	ldr	r2, [r3, #28]
 8001b46:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <HAL_RCC_ClockConfig+0x358>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d208      	bcs.n	8001b64 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <HAL_RCC_ClockConfig+0x358>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	4917      	ldr	r1, [pc, #92]	; (8001bbc <HAL_RCC_ClockConfig+0x358>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b64:	f000 f834 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <HAL_RCC_ClockConfig+0x358>)
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	0a1b      	lsrs	r3, r3, #8
 8001b70:	f003 030f 	and.w	r3, r3, #15
 8001b74:	4912      	ldr	r1, [pc, #72]	; (8001bc0 <HAL_RCC_ClockConfig+0x35c>)
 8001b76:	5ccb      	ldrb	r3, [r1, r3]
 8001b78:	f003 031f 	and.w	r3, r3, #31
 8001b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b80:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_RCC_ClockConfig+0x358>)
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	4a0d      	ldr	r2, [pc, #52]	; (8001bc0 <HAL_RCC_ClockConfig+0x35c>)
 8001b8c:	5cd3      	ldrb	r3, [r2, r3]
 8001b8e:	f003 031f 	and.w	r3, r3, #31
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
 8001b98:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <HAL_RCC_ClockConfig+0x360>)
 8001b9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b9c:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <HAL_RCC_ClockConfig+0x364>)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_RCC_ClockConfig+0x368>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fef6 	bl	8000998 <HAL_InitTick>
 8001bac:	4603      	mov	r3, r0
 8001bae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	58024400 	.word	0x58024400
 8001bc0:	080021c8 	.word	0x080021c8
 8001bc4:	24000004 	.word	0x24000004
 8001bc8:	24000000 	.word	0x24000000
 8001bcc:	24000008 	.word	0x24000008

08001bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	; 0x24
 8001bd4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bd6:	4bb3      	ldr	r3, [pc, #716]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bde:	2b18      	cmp	r3, #24
 8001be0:	f200 8155 	bhi.w	8001e8e <HAL_RCC_GetSysClockFreq+0x2be>
 8001be4:	a201      	add	r2, pc, #4	; (adr r2, 8001bec <HAL_RCC_GetSysClockFreq+0x1c>)
 8001be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bea:	bf00      	nop
 8001bec:	08001c51 	.word	0x08001c51
 8001bf0:	08001e8f 	.word	0x08001e8f
 8001bf4:	08001e8f 	.word	0x08001e8f
 8001bf8:	08001e8f 	.word	0x08001e8f
 8001bfc:	08001e8f 	.word	0x08001e8f
 8001c00:	08001e8f 	.word	0x08001e8f
 8001c04:	08001e8f 	.word	0x08001e8f
 8001c08:	08001e8f 	.word	0x08001e8f
 8001c0c:	08001c77 	.word	0x08001c77
 8001c10:	08001e8f 	.word	0x08001e8f
 8001c14:	08001e8f 	.word	0x08001e8f
 8001c18:	08001e8f 	.word	0x08001e8f
 8001c1c:	08001e8f 	.word	0x08001e8f
 8001c20:	08001e8f 	.word	0x08001e8f
 8001c24:	08001e8f 	.word	0x08001e8f
 8001c28:	08001e8f 	.word	0x08001e8f
 8001c2c:	08001c7d 	.word	0x08001c7d
 8001c30:	08001e8f 	.word	0x08001e8f
 8001c34:	08001e8f 	.word	0x08001e8f
 8001c38:	08001e8f 	.word	0x08001e8f
 8001c3c:	08001e8f 	.word	0x08001e8f
 8001c40:	08001e8f 	.word	0x08001e8f
 8001c44:	08001e8f 	.word	0x08001e8f
 8001c48:	08001e8f 	.word	0x08001e8f
 8001c4c:	08001c83 	.word	0x08001c83
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c50:	4b94      	ldr	r3, [pc, #592]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0320 	and.w	r3, r3, #32
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d009      	beq.n	8001c70 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001c5c:	4b91      	ldr	r3, [pc, #580]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	08db      	lsrs	r3, r3, #3
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	4a90      	ldr	r2, [pc, #576]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001c6e:	e111      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001c70:	4b8d      	ldr	r3, [pc, #564]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c72:	61bb      	str	r3, [r7, #24]
    break;
 8001c74:	e10e      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001c76:	4b8d      	ldr	r3, [pc, #564]	; (8001eac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001c78:	61bb      	str	r3, [r7, #24]
    break;
 8001c7a:	e10b      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001c7c:	4b8c      	ldr	r3, [pc, #560]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001c7e:	61bb      	str	r3, [r7, #24]
    break;
 8001c80:	e108      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001c82:	4b88      	ldr	r3, [pc, #544]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001c8c:	4b85      	ldr	r3, [pc, #532]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c96:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001c98:	4b82      	ldr	r3, [pc, #520]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001ca2:	4b80      	ldr	r3, [pc, #512]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca6:	08db      	lsrs	r3, r3, #3
 8001ca8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	fb02 f303 	mul.w	r3, r2, r3
 8001cb2:	ee07 3a90 	vmov	s15, r3
 8001cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80e1 	beq.w	8001e88 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	f000 8083 	beq.w	8001dd4 <HAL_RCC_GetSysClockFreq+0x204>
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	f200 80a1 	bhi.w	8001e18 <HAL_RCC_GetSysClockFreq+0x248>
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x114>
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d056      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001ce2:	e099      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ce4:	4b6f      	ldr	r3, [pc, #444]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0320 	and.w	r3, r3, #32
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d02d      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001cf0:	4b6c      	ldr	r3, [pc, #432]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	08db      	lsrs	r3, r3, #3
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	4a6b      	ldr	r2, [pc, #428]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001d00:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	ee07 3a90 	vmov	s15, r3
 8001d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d1a:	4b62      	ldr	r3, [pc, #392]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d2e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001eb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001d4a:	e087      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	ee07 3a90 	vmov	s15, r3
 8001d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d56:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001eb8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d5e:	4b51      	ldr	r3, [pc, #324]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d72:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001eb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001d8e:	e065      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	ee07 3a90 	vmov	s15, r3
 8001d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d9a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001ebc <HAL_RCC_GetSysClockFreq+0x2ec>
 8001d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001da2:	4b40      	ldr	r3, [pc, #256]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001db2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001db6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001eb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001dd2:	e043      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dde:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001ec0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001de6:	4b2f      	ldr	r3, [pc, #188]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dee:	ee07 3a90 	vmov	s15, r3
 8001df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001df6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dfa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001eb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e16:	e021      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	ee07 3a90 	vmov	s15, r3
 8001e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e22:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001ebc <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e3e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001eb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e5a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	0a5b      	lsrs	r3, r3, #9
 8001e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e66:	3301      	adds	r3, #1
 8001e68:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	ee07 3a90 	vmov	s15, r3
 8001e70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e74:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e80:	ee17 3a90 	vmov	r3, s15
 8001e84:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001e86:	e005      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
    break;
 8001e8c:	e002      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e90:	61bb      	str	r3, [r7, #24]
    break;
 8001e92:	bf00      	nop
  }

  return sysclockfreq;
 8001e94:	69bb      	ldr	r3, [r7, #24]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3724      	adds	r7, #36	; 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	58024400 	.word	0x58024400
 8001ea8:	03d09000 	.word	0x03d09000
 8001eac:	003d0900 	.word	0x003d0900
 8001eb0:	007a1200 	.word	0x007a1200
 8001eb4:	46000000 	.word	0x46000000
 8001eb8:	4c742400 	.word	0x4c742400
 8001ebc:	4a742400 	.word	0x4a742400
 8001ec0:	4af42400 	.word	0x4af42400

08001ec4 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
  //---------------
  //QAD_GPIO_Output

//QAD_GPIO_Output::QAD_GPIO_Output
//QAD_GPIO_Output Constructor
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO), m_uPin(uPin), m_eState(PinOff) {
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	88fa      	ldrh	r2, [r7, #6]
 8001edc:	809a      	strh	r2, [r3, #4]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	719a      	strb	r2, [r3, #6]

	GPIO_InitTypeDef GPIO_Init;
	GPIO_Init.Pin    = m_uPin;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	889b      	ldrh	r3, [r3, #4]
 8001ee8:	617b      	str	r3, [r7, #20]
	GPIO_Init.Mode   = GPIO_MODE_OUTPUT_PP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Pull   = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f107 0214 	add.w	r2, r7, #20
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fe9b 	bl	8000c3c <HAL_GPIO_Init>
}
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3728      	adds	r7, #40	; 0x28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <_ZN15QAD_GPIO_Output2onEv>:
}


//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
void QAD_GPIO_Output::on(void) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	889b      	ldrh	r3, [r3, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7ff f83a 	bl	8000f9c <HAL_GPIO_WritePin>
	m_eState = PinOn;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	719a      	strb	r2, [r3, #6]
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_ZN15QAD_GPIO_Output3offEv>:


//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
void QAD_GPIO_Output::off(void) {
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	889b      	ldrh	r3, [r3, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f7ff f827 	bl	8000f9c <HAL_GPIO_WritePin>
	m_eState = PinOff;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	719a      	strb	r2, [r3, #6]
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <_ZN15QAD_GPIO_Output6toggleEv>:


//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
void QAD_GPIO_Output::toggle(void) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  if (m_eState) {
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	799b      	ldrb	r3, [r3, #6]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <_ZN15QAD_GPIO_Output6toggleEv+0x18>
  	off();
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ffe2 	bl	8001f36 <_ZN15QAD_GPIO_Output3offEv>
  } else {
  	on();
  }
}
 8001f72:	e002      	b.n	8001f7a <_ZN15QAD_GPIO_Output6toggleEv+0x1e>
  	on();
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ffcb 	bl	8001f10 <_ZN15QAD_GPIO_Output2onEv>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <_Znwj>:
 8001f82:	2801      	cmp	r0, #1
 8001f84:	bf38      	it	cc
 8001f86:	2001      	movcc	r0, #1
 8001f88:	b510      	push	{r4, lr}
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f000 f843 	bl	8002018 <malloc>
 8001f92:	b930      	cbnz	r0, 8001fa2 <_Znwj+0x20>
 8001f94:	f000 f806 	bl	8001fa4 <_ZSt15get_new_handlerv>
 8001f98:	b908      	cbnz	r0, 8001f9e <_Znwj+0x1c>
 8001f9a:	f000 f80b 	bl	8001fb4 <abort>
 8001f9e:	4780      	blx	r0
 8001fa0:	e7f4      	b.n	8001f8c <_Znwj+0xa>
 8001fa2:	bd10      	pop	{r4, pc}

08001fa4 <_ZSt15get_new_handlerv>:
 8001fa4:	4b02      	ldr	r3, [pc, #8]	; (8001fb0 <_ZSt15get_new_handlerv+0xc>)
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	f3bf 8f5b 	dmb	ish
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	24000098 	.word	0x24000098

08001fb4 <abort>:
 8001fb4:	b508      	push	{r3, lr}
 8001fb6:	2006      	movs	r0, #6
 8001fb8:	f000 f8d0 	bl	800215c <raise>
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	f7fe fc1f 	bl	8000800 <_exit>
	...

08001fc4 <__errno>:
 8001fc4:	4b01      	ldr	r3, [pc, #4]	; (8001fcc <__errno+0x8>)
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	24000010 	.word	0x24000010

08001fd0 <__libc_init_array>:
 8001fd0:	b570      	push	{r4, r5, r6, lr}
 8001fd2:	4d0d      	ldr	r5, [pc, #52]	; (8002008 <__libc_init_array+0x38>)
 8001fd4:	4c0d      	ldr	r4, [pc, #52]	; (800200c <__libc_init_array+0x3c>)
 8001fd6:	1b64      	subs	r4, r4, r5
 8001fd8:	10a4      	asrs	r4, r4, #2
 8001fda:	2600      	movs	r6, #0
 8001fdc:	42a6      	cmp	r6, r4
 8001fde:	d109      	bne.n	8001ff4 <__libc_init_array+0x24>
 8001fe0:	4d0b      	ldr	r5, [pc, #44]	; (8002010 <__libc_init_array+0x40>)
 8001fe2:	4c0c      	ldr	r4, [pc, #48]	; (8002014 <__libc_init_array+0x44>)
 8001fe4:	f000 f8e4 	bl	80021b0 <_init>
 8001fe8:	1b64      	subs	r4, r4, r5
 8001fea:	10a4      	asrs	r4, r4, #2
 8001fec:	2600      	movs	r6, #0
 8001fee:	42a6      	cmp	r6, r4
 8001ff0:	d105      	bne.n	8001ffe <__libc_init_array+0x2e>
 8001ff2:	bd70      	pop	{r4, r5, r6, pc}
 8001ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ff8:	4798      	blx	r3
 8001ffa:	3601      	adds	r6, #1
 8001ffc:	e7ee      	b.n	8001fdc <__libc_init_array+0xc>
 8001ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002002:	4798      	blx	r3
 8002004:	3601      	adds	r6, #1
 8002006:	e7f2      	b.n	8001fee <__libc_init_array+0x1e>
 8002008:	080021d8 	.word	0x080021d8
 800200c:	080021d8 	.word	0x080021d8
 8002010:	080021d8 	.word	0x080021d8
 8002014:	080021dc 	.word	0x080021dc

08002018 <malloc>:
 8002018:	4b02      	ldr	r3, [pc, #8]	; (8002024 <malloc+0xc>)
 800201a:	4601      	mov	r1, r0
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	f000 b80b 	b.w	8002038 <_malloc_r>
 8002022:	bf00      	nop
 8002024:	24000010 	.word	0x24000010

08002028 <memset>:
 8002028:	4402      	add	r2, r0
 800202a:	4603      	mov	r3, r0
 800202c:	4293      	cmp	r3, r2
 800202e:	d100      	bne.n	8002032 <memset+0xa>
 8002030:	4770      	bx	lr
 8002032:	f803 1b01 	strb.w	r1, [r3], #1
 8002036:	e7f9      	b.n	800202c <memset+0x4>

08002038 <_malloc_r>:
 8002038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203a:	1ccd      	adds	r5, r1, #3
 800203c:	f025 0503 	bic.w	r5, r5, #3
 8002040:	3508      	adds	r5, #8
 8002042:	2d0c      	cmp	r5, #12
 8002044:	bf38      	it	cc
 8002046:	250c      	movcc	r5, #12
 8002048:	2d00      	cmp	r5, #0
 800204a:	4606      	mov	r6, r0
 800204c:	db01      	blt.n	8002052 <_malloc_r+0x1a>
 800204e:	42a9      	cmp	r1, r5
 8002050:	d903      	bls.n	800205a <_malloc_r+0x22>
 8002052:	230c      	movs	r3, #12
 8002054:	6033      	str	r3, [r6, #0]
 8002056:	2000      	movs	r0, #0
 8002058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800205a:	f000 f89b 	bl	8002194 <__malloc_lock>
 800205e:	4921      	ldr	r1, [pc, #132]	; (80020e4 <_malloc_r+0xac>)
 8002060:	680a      	ldr	r2, [r1, #0]
 8002062:	4614      	mov	r4, r2
 8002064:	b99c      	cbnz	r4, 800208e <_malloc_r+0x56>
 8002066:	4f20      	ldr	r7, [pc, #128]	; (80020e8 <_malloc_r+0xb0>)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	b923      	cbnz	r3, 8002076 <_malloc_r+0x3e>
 800206c:	4621      	mov	r1, r4
 800206e:	4630      	mov	r0, r6
 8002070:	f000 f83c 	bl	80020ec <_sbrk_r>
 8002074:	6038      	str	r0, [r7, #0]
 8002076:	4629      	mov	r1, r5
 8002078:	4630      	mov	r0, r6
 800207a:	f000 f837 	bl	80020ec <_sbrk_r>
 800207e:	1c43      	adds	r3, r0, #1
 8002080:	d123      	bne.n	80020ca <_malloc_r+0x92>
 8002082:	230c      	movs	r3, #12
 8002084:	6033      	str	r3, [r6, #0]
 8002086:	4630      	mov	r0, r6
 8002088:	f000 f88a 	bl	80021a0 <__malloc_unlock>
 800208c:	e7e3      	b.n	8002056 <_malloc_r+0x1e>
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	1b5b      	subs	r3, r3, r5
 8002092:	d417      	bmi.n	80020c4 <_malloc_r+0x8c>
 8002094:	2b0b      	cmp	r3, #11
 8002096:	d903      	bls.n	80020a0 <_malloc_r+0x68>
 8002098:	6023      	str	r3, [r4, #0]
 800209a:	441c      	add	r4, r3
 800209c:	6025      	str	r5, [r4, #0]
 800209e:	e004      	b.n	80020aa <_malloc_r+0x72>
 80020a0:	6863      	ldr	r3, [r4, #4]
 80020a2:	42a2      	cmp	r2, r4
 80020a4:	bf0c      	ite	eq
 80020a6:	600b      	streq	r3, [r1, #0]
 80020a8:	6053      	strne	r3, [r2, #4]
 80020aa:	4630      	mov	r0, r6
 80020ac:	f000 f878 	bl	80021a0 <__malloc_unlock>
 80020b0:	f104 000b 	add.w	r0, r4, #11
 80020b4:	1d23      	adds	r3, r4, #4
 80020b6:	f020 0007 	bic.w	r0, r0, #7
 80020ba:	1ac2      	subs	r2, r0, r3
 80020bc:	d0cc      	beq.n	8002058 <_malloc_r+0x20>
 80020be:	1a1b      	subs	r3, r3, r0
 80020c0:	50a3      	str	r3, [r4, r2]
 80020c2:	e7c9      	b.n	8002058 <_malloc_r+0x20>
 80020c4:	4622      	mov	r2, r4
 80020c6:	6864      	ldr	r4, [r4, #4]
 80020c8:	e7cc      	b.n	8002064 <_malloc_r+0x2c>
 80020ca:	1cc4      	adds	r4, r0, #3
 80020cc:	f024 0403 	bic.w	r4, r4, #3
 80020d0:	42a0      	cmp	r0, r4
 80020d2:	d0e3      	beq.n	800209c <_malloc_r+0x64>
 80020d4:	1a21      	subs	r1, r4, r0
 80020d6:	4630      	mov	r0, r6
 80020d8:	f000 f808 	bl	80020ec <_sbrk_r>
 80020dc:	3001      	adds	r0, #1
 80020de:	d1dd      	bne.n	800209c <_malloc_r+0x64>
 80020e0:	e7cf      	b.n	8002082 <_malloc_r+0x4a>
 80020e2:	bf00      	nop
 80020e4:	2400009c 	.word	0x2400009c
 80020e8:	240000a0 	.word	0x240000a0

080020ec <_sbrk_r>:
 80020ec:	b538      	push	{r3, r4, r5, lr}
 80020ee:	4d06      	ldr	r5, [pc, #24]	; (8002108 <_sbrk_r+0x1c>)
 80020f0:	2300      	movs	r3, #0
 80020f2:	4604      	mov	r4, r0
 80020f4:	4608      	mov	r0, r1
 80020f6:	602b      	str	r3, [r5, #0]
 80020f8:	f7fe fb8c 	bl	8000814 <_sbrk>
 80020fc:	1c43      	adds	r3, r0, #1
 80020fe:	d102      	bne.n	8002106 <_sbrk_r+0x1a>
 8002100:	682b      	ldr	r3, [r5, #0]
 8002102:	b103      	cbz	r3, 8002106 <_sbrk_r+0x1a>
 8002104:	6023      	str	r3, [r4, #0]
 8002106:	bd38      	pop	{r3, r4, r5, pc}
 8002108:	240000a8 	.word	0x240000a8

0800210c <_raise_r>:
 800210c:	291f      	cmp	r1, #31
 800210e:	b538      	push	{r3, r4, r5, lr}
 8002110:	4604      	mov	r4, r0
 8002112:	460d      	mov	r5, r1
 8002114:	d904      	bls.n	8002120 <_raise_r+0x14>
 8002116:	2316      	movs	r3, #22
 8002118:	6003      	str	r3, [r0, #0]
 800211a:	f04f 30ff 	mov.w	r0, #4294967295
 800211e:	bd38      	pop	{r3, r4, r5, pc}
 8002120:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002122:	b112      	cbz	r2, 800212a <_raise_r+0x1e>
 8002124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002128:	b94b      	cbnz	r3, 800213e <_raise_r+0x32>
 800212a:	4620      	mov	r0, r4
 800212c:	f000 f830 	bl	8002190 <_getpid_r>
 8002130:	462a      	mov	r2, r5
 8002132:	4601      	mov	r1, r0
 8002134:	4620      	mov	r0, r4
 8002136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800213a:	f000 b817 	b.w	800216c <_kill_r>
 800213e:	2b01      	cmp	r3, #1
 8002140:	d00a      	beq.n	8002158 <_raise_r+0x4c>
 8002142:	1c59      	adds	r1, r3, #1
 8002144:	d103      	bne.n	800214e <_raise_r+0x42>
 8002146:	2316      	movs	r3, #22
 8002148:	6003      	str	r3, [r0, #0]
 800214a:	2001      	movs	r0, #1
 800214c:	e7e7      	b.n	800211e <_raise_r+0x12>
 800214e:	2400      	movs	r4, #0
 8002150:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002154:	4628      	mov	r0, r5
 8002156:	4798      	blx	r3
 8002158:	2000      	movs	r0, #0
 800215a:	e7e0      	b.n	800211e <_raise_r+0x12>

0800215c <raise>:
 800215c:	4b02      	ldr	r3, [pc, #8]	; (8002168 <raise+0xc>)
 800215e:	4601      	mov	r1, r0
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	f7ff bfd3 	b.w	800210c <_raise_r>
 8002166:	bf00      	nop
 8002168:	24000010 	.word	0x24000010

0800216c <_kill_r>:
 800216c:	b538      	push	{r3, r4, r5, lr}
 800216e:	4d07      	ldr	r5, [pc, #28]	; (800218c <_kill_r+0x20>)
 8002170:	2300      	movs	r3, #0
 8002172:	4604      	mov	r4, r0
 8002174:	4608      	mov	r0, r1
 8002176:	4611      	mov	r1, r2
 8002178:	602b      	str	r3, [r5, #0]
 800217a:	f7fe fb31 	bl	80007e0 <_kill>
 800217e:	1c43      	adds	r3, r0, #1
 8002180:	d102      	bne.n	8002188 <_kill_r+0x1c>
 8002182:	682b      	ldr	r3, [r5, #0]
 8002184:	b103      	cbz	r3, 8002188 <_kill_r+0x1c>
 8002186:	6023      	str	r3, [r4, #0]
 8002188:	bd38      	pop	{r3, r4, r5, pc}
 800218a:	bf00      	nop
 800218c:	240000a8 	.word	0x240000a8

08002190 <_getpid_r>:
 8002190:	f7fe bb1e 	b.w	80007d0 <_getpid>

08002194 <__malloc_lock>:
 8002194:	4801      	ldr	r0, [pc, #4]	; (800219c <__malloc_lock+0x8>)
 8002196:	f000 b809 	b.w	80021ac <__retarget_lock_acquire_recursive>
 800219a:	bf00      	nop
 800219c:	240000b0 	.word	0x240000b0

080021a0 <__malloc_unlock>:
 80021a0:	4801      	ldr	r0, [pc, #4]	; (80021a8 <__malloc_unlock+0x8>)
 80021a2:	f000 b804 	b.w	80021ae <__retarget_lock_release_recursive>
 80021a6:	bf00      	nop
 80021a8:	240000b0 	.word	0x240000b0

080021ac <__retarget_lock_acquire_recursive>:
 80021ac:	4770      	bx	lr

080021ae <__retarget_lock_release_recursive>:
 80021ae:	4770      	bx	lr

080021b0 <_init>:
 80021b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b2:	bf00      	nop
 80021b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021b6:	bc08      	pop	{r3}
 80021b8:	469e      	mov	lr, r3
 80021ba:	4770      	bx	lr

080021bc <_fini>:
 80021bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021be:	bf00      	nop
 80021c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021c2:	bc08      	pop	{r3}
 80021c4:	469e      	mov	lr, r3
 80021c6:	4770      	bx	lr
