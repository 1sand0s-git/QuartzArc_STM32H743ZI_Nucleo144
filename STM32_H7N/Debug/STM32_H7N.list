
STM32_H7N.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000206c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002304  08002304  00012304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002314  08002314  00012314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002318  08002318  00012318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  24000000  0800231c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000004c  24000074  08002390  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240000c0  08002390  000200c0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000a550  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   0001806b  00000000  00000000  0002a5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000027c5  00000000  00000000  0004265d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000778  00000000  00000000  00044e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00176545  00000000  00000000  000455a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000006b0  00000000  00000000  001bbae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003c9a4  00000000  00000000  001bc198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001f8b3c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001fd4  00000000  00000000  001f8b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000074 	.word	0x24000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080022ec 	.word	0x080022ec

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000078 	.word	0x24000078
 80002d4:	080022ec 	.word	0x080022ec

080002d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80002d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000310 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80002dc:	f000 fb46 	bl	800096c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e0:	480c      	ldr	r0, [pc, #48]	; (8000314 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002e2:	490d      	ldr	r1, [pc, #52]	; (8000318 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002e4:	4a0d      	ldr	r2, [pc, #52]	; (800031c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e8:	e002      	b.n	80002f0 <LoopCopyDataInit>

080002ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ee:	3304      	adds	r3, #4

080002f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f4:	d3f9      	bcc.n	80002ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f6:	4a0a      	ldr	r2, [pc, #40]	; (8000320 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80002f8:	4c0a      	ldr	r4, [pc, #40]	; (8000324 <LoopFillZerobss+0x22>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002fc:	e001      	b.n	8000302 <LoopFillZerobss>

080002fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000300:	3204      	adds	r2, #4

08000302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000304:	d3fb      	bcc.n	80002fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000306:	f001 ff01 	bl	800210c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800030a:	f000 fa5f 	bl	80007cc <main>
  bx  lr
 800030e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000310:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000314:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000318:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 800031c:	0800231c 	.word	0x0800231c
  ldr r2, =_sbss
 8000320:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000324:	240000c0 	.word	0x240000c0

08000328 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000328:	e7fe      	b.n	8000328 <ADC3_IRQHandler>
	...

0800032c <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks.
//Also enables all GPIOs
//
//Returns QA_OK if successful, or QA_Fail if initialized failed
QA_Result SystemInitialize(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b0b0      	sub	sp, #192	; 0xc0
 8000330:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000332:	4b96      	ldr	r3, [pc, #600]	; (800058c <_Z16SystemInitializev+0x260>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800033a:	2b00      	cmp	r3, #0
 800033c:	bf14      	ite	ne
 800033e:	2301      	movne	r3, #1
 8000340:	2300      	moveq	r3, #0
 8000342:	b2db      	uxtb	r3, r3
 8000344:	2b00      	cmp	r3, #0
 8000346:	d11b      	bne.n	8000380 <_Z16SystemInitializev+0x54>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000348:	f3bf 8f4f 	dsb	sy
}
 800034c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800034e:	f3bf 8f6f 	isb	sy
}
 8000352:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000354:	4b8d      	ldr	r3, [pc, #564]	; (800058c <_Z16SystemInitializev+0x260>)
 8000356:	2200      	movs	r2, #0
 8000358:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800035c:	f3bf 8f4f 	dsb	sy
}
 8000360:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000362:	f3bf 8f6f 	isb	sy
}
 8000366:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000368:	4b88      	ldr	r3, [pc, #544]	; (800058c <_Z16SystemInitializev+0x260>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a87      	ldr	r2, [pc, #540]	; (800058c <_Z16SystemInitializev+0x260>)
 800036e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000372:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000374:	f3bf 8f4f 	dsb	sy
}
 8000378:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800037a:	f3bf 8f6f 	isb	sy
}
 800037e:	e000      	b.n	8000382 <_Z16SystemInitializev+0x56>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000380:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000382:	4b82      	ldr	r3, [pc, #520]	; (800058c <_Z16SystemInitializev+0x260>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800038a:	2b00      	cmp	r3, #0
 800038c:	bf14      	ite	ne
 800038e:	2301      	movne	r3, #1
 8000390:	2300      	moveq	r3, #0
 8000392:	b2db      	uxtb	r3, r3
 8000394:	2b00      	cmp	r3, #0
 8000396:	d14f      	bne.n	8000438 <_Z16SystemInitializev+0x10c>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000398:	4b7c      	ldr	r3, [pc, #496]	; (800058c <_Z16SystemInitializev+0x260>)
 800039a:	2200      	movs	r2, #0
 800039c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003a0:	f3bf 8f4f 	dsb	sy
}
 80003a4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003a6:	4b79      	ldr	r3, [pc, #484]	; (800058c <_Z16SystemInitializev+0x260>)
 80003a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80003b4:	0b5b      	lsrs	r3, r3, #13
 80003b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80003c2:	08db      	lsrs	r3, r3, #3
 80003c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80003c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80003d0:	015a      	lsls	r2, r3, #5
 80003d2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80003d6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80003d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80003dc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003de:	496b      	ldr	r1, [pc, #428]	; (800058c <_Z16SystemInitializev+0x260>)
 80003e0:	4313      	orrs	r3, r2
 80003e2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80003e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80003ea:	1e5a      	subs	r2, r3, #1
 80003ec:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	bf14      	ite	ne
 80003f4:	2301      	movne	r3, #1
 80003f6:	2300      	moveq	r3, #0
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d000      	beq.n	8000400 <_Z16SystemInitializev+0xd4>
      do {
 80003fe:	e7e5      	b.n	80003cc <_Z16SystemInitializev+0xa0>
    } while(sets-- != 0U);
 8000400:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000404:	1e5a      	subs	r2, r3, #1
 8000406:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800040a:	2b00      	cmp	r3, #0
 800040c:	bf14      	ite	ne
 800040e:	2301      	movne	r3, #1
 8000410:	2300      	moveq	r3, #0
 8000412:	b2db      	uxtb	r3, r3
 8000414:	2b00      	cmp	r3, #0
 8000416:	d000      	beq.n	800041a <_Z16SystemInitializev+0xee>
    do {
 8000418:	e7d1      	b.n	80003be <_Z16SystemInitializev+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
 800041a:	f3bf 8f4f 	dsb	sy
}
 800041e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000420:	4b5a      	ldr	r3, [pc, #360]	; (800058c <_Z16SystemInitializev+0x260>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	4a59      	ldr	r2, [pc, #356]	; (800058c <_Z16SystemInitializev+0x260>)
 8000426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800042a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800042c:	f3bf 8f4f 	dsb	sy
}
 8000430:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000432:	f3bf 8f6f 	isb	sy
}
 8000436:	e000      	b.n	800043a <_Z16SystemInitializev+0x10e>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000438:	bf00      	nop
  SCB_EnableDCache();


  //--------------------------
  //Set NVIC Priority Grouping
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800043a:	2003      	movs	r0, #3
 800043c:	f000 fc36 	bl	8000cac <HAL_NVIC_SetPriorityGrouping>


  //------------
	//Init SysTick
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000440:	2000      	movs	r0, #0
 8000442:	f000 fb1f 	bl	8000a84 <HAL_InitTick>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	bf14      	ite	ne
 800044c:	2301      	movne	r3, #1
 800044e:	2300      	moveq	r3, #0
 8000450:	b2db      	uxtb	r3, r3
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <_Z16SystemInitializev+0x12e>
		return QA_Fail;
 8000456:	2301      	movs	r3, #1
 8000458:	e182      	b.n	8000760 <_Z16SystemInitializev+0x434>


  //----------------------------------
  //Configure Internal Power Regulator
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800045a:	2002      	movs	r0, #2
 800045c:	f000 fe2e 	bl	80010bc <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000460:	2300      	movs	r3, #0
 8000462:	647b      	str	r3, [r7, #68]	; 0x44
 8000464:	4b4a      	ldr	r3, [pc, #296]	; (8000590 <_Z16SystemInitializev+0x264>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a49      	ldr	r2, [pc, #292]	; (8000590 <_Z16SystemInitializev+0x264>)
 800046a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b47      	ldr	r3, [pc, #284]	; (8000590 <_Z16SystemInitializev+0x264>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000478:	647b      	str	r3, [r7, #68]	; 0x44
 800047a:	4b46      	ldr	r3, [pc, #280]	; (8000594 <_Z16SystemInitializev+0x268>)
 800047c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800047e:	4a45      	ldr	r2, [pc, #276]	; (8000594 <_Z16SystemInitializev+0x268>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000486:	4b43      	ldr	r3, [pc, #268]	; (8000594 <_Z16SystemInitializev+0x268>)
 8000488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	647b      	str	r3, [r7, #68]	; 0x44
 8000490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000492:	4b3f      	ldr	r3, [pc, #252]	; (8000590 <_Z16SystemInitializev+0x264>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800049a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800049e:	bf14      	ite	ne
 80004a0:	2301      	movne	r3, #1
 80004a2:	2300      	moveq	r3, #0
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d000      	beq.n	80004ac <_Z16SystemInitializev+0x180>
 80004aa:	e7f2      	b.n	8000492 <_Z16SystemInitializev+0x166>
  //---------------------
  //Configure Oscillators
  //
  //Configure High Speed External (HSE) oscillator to be used, and setup primary PLL to provide a 480MHz clock
  //NOTE: HSE Oscillator provided on STM32F743ZI Nucleo144 board is an 8MHz clock signal provided by the ST-Link MCU's Master Clock Output
  RCC_OscInitTypeDef RCC_OscInit = {0};
 80004ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80004b0:	224c      	movs	r2, #76	; 0x4c
 80004b2:	2100      	movs	r1, #0
 80004b4:	4618      	mov	r0, r3
 80004b6:	f001 fe55 	bl	8002164 <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE; //Define which oscillator is to be configured
 80004ba:	2301      	movs	r3, #1
 80004bc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInit.HSEState       = RCC_HSE_BYPASS;         //Set High Speed External oscillator as system clock
 80004be:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80004c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;             //Enable primary PLL
 80004c4:	2302      	movs	r3, #2
 80004c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;      //Set High Speed External oscillator as PLL input clock
 80004ca:	2302      	movs	r3, #2
 80004cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    //Set PLL values required for 480MHz system clock
  RCC_OscInit.PLL.PLLM       = 1;
 80004d0:	2301      	movs	r3, #1
 80004d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInit.PLL.PLLN       = 120;
 80004d6:	2378      	movs	r3, #120	; 0x78
 80004d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInit.PLL.PLLP       = 2;
 80004dc:	2302      	movs	r3, #2
 80004de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInit.PLL.PLLQ       = 20;
 80004e2:	2314      	movs	r3, #20
 80004e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInit.PLL.PLLR       = 2;
 80004e8:	2302      	movs	r3, #2
 80004ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInit.PLL.PLLRGE     = RCC_PLL1VCIRANGE_3;
 80004ee:	230c      	movs	r3, #12
 80004f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInit.PLL.PLLVCOSEL  = RCC_PLL1VCOWIDE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInit.PLL.PLLFRACN   = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {     //Initialize Oscillators using values in init structure
 8000500:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000504:	4618      	mov	r0, r3
 8000506:	f000 fe13 	bl	8001130 <HAL_RCC_OscConfig>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	bf14      	ite	ne
 8000510:	2301      	movne	r3, #1
 8000512:	2300      	moveq	r3, #0
 8000514:	b2db      	uxtb	r3, r3
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <_Z16SystemInitializev+0x1f2>
    return QA_Fail;
 800051a:	2301      	movs	r3, #1
 800051c:	e120      	b.n	8000760 <_Z16SystemInitializev+0x434>
  }


  //-------------------
  //Enable SysCfg Clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051e:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <_Z16SystemInitializev+0x26c>)
 8000520:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000524:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <_Z16SystemInitializev+0x26c>)
 8000526:	f043 0302 	orr.w	r3, r3, #2
 800052a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800052e:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <_Z16SystemInitializev+0x26c>)
 8000530:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000534:	f003 0302 	and.w	r3, r3, #2
 8000538:	643b      	str	r3, [r7, #64]	; 0x40
 800053a:	6c3b      	ldr	r3, [r7, #64]	; 0x40


  //--------------------------
  //Configure CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 800053c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000540:	2220      	movs	r2, #32
 8000542:	2100      	movs	r1, #0
 8000544:	4618      	mov	r0, r3
 8000546:	f001 fe0d 	bl	8002164 <memset>
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK |       //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK, D3PCLK1, D1PCLK1)
 800054a:	233f      	movs	r3, #63	; 0x3f
 800054c:	64bb      	str	r3, [r7, #72]	; 0x48
  		                         RCC_CLOCKTYPE_SYSCLK |
  		                         RCC_CLOCKTYPE_PCLK1 |
															 RCC_CLOCKTYPE_PCLK2 |
															 RCC_CLOCKTYPE_D3PCLK1 |
															 RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;   //Set primary PLL as system clock source
 800054e:	2303      	movs	r3, #3
 8000550:	64fb      	str	r3, [r7, #76]	; 0x4c

  RCC_ClkInit.SYSCLKDivider  = RCC_SYSCLK_DIV1;           //Set clock divider for CPU and CPU Systick clocks.
 8000552:	2300      	movs	r3, #0
 8000554:	653b      	str	r3, [r7, #80]	; 0x50
                                                          //DIV 1 provides a frequency of 480MHz

  RCC_ClkInit.AHBCLKDivider  = RCC_HCLK_DIV2;             //Set clock divider for AXI Peripheral clocks, as well as host bus clocks
 8000556:	2308      	movs	r3, #8
 8000558:	657b      	str	r3, [r7, #84]	; 0x54
                                                          //for AHB1, AHB2, AHB3 and AHB4
                                                          //DIV 2 provides a frequency of 240MHz

  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV2;             //Set clock divider for peripheral bus 1 clock (APB1)
 800055a:	2308      	movs	r3, #8
 800055c:	65fb      	str	r3, [r7, #92]	; 0x5c
                                                          //DIV2 provides a frequency of 120MHz
                                                          //NOTE: APB1 timer clocks are clock doubled, providing APB1 timers with 240MHz clocks

  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV2;             //Set clock divider for peripheral bus 2 clock (APB2)
 800055e:	2308      	movs	r3, #8
 8000560:	663b      	str	r3, [r7, #96]	; 0x60
                                                          //DIV2 provides a frequency of 120MHz
                                                          //NOTE: APB2 timer clocks are clock doubled, providing APB2 timers with 240MHz clocks

  RCC_ClkInit.APB3CLKDivider = RCC_HCLK_DIV2;             //Set clock divider for peripheral bus 3 clock (APB3)
 8000562:	2308      	movs	r3, #8
 8000564:	65bb      	str	r3, [r7, #88]	; 0x58
                                                          //DIV2 provides a frequency of 120MHz

  RCC_ClkInit.APB4CLKDivider = RCC_HCLK_DIV2;             //Set clock divider for peripheral bus 4 clock (APB4)
 8000566:	2308      	movs	r3, #8
 8000568:	667b      	str	r3, [r7, #100]	; 0x64
                                                          //DIV2 provides a frequency of 120MHz

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_4) != HAL_OK) {  //Initialize system clocks using required values,
 800056a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800056e:	2104      	movs	r1, #4
 8000570:	4618      	mov	r0, r3
 8000572:	f001 f9ed 	bl	8001950 <HAL_RCC_ClockConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	bf14      	ite	ne
 800057c:	2301      	movne	r3, #1
 800057e:	2300      	moveq	r3, #0
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d00a      	beq.n	800059c <_Z16SystemInitializev+0x270>
  	                                                                   //and setting Flash Latency to 4 cycles
  	return QA_Fail;
 8000586:	2301      	movs	r3, #1
 8000588:	e0ea      	b.n	8000760 <_Z16SystemInitializev+0x434>
 800058a:	bf00      	nop
 800058c:	e000ed00 	.word	0xe000ed00
 8000590:	58024800 	.word	0x58024800
 8000594:	58000400 	.word	0x58000400
 8000598:	58024400 	.word	0x58024400
  }


  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	4b72      	ldr	r3, [pc, #456]	; (8000768 <_Z16SystemInitializev+0x43c>)
 800059e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a2:	4a71      	ldr	r2, [pc, #452]	; (8000768 <_Z16SystemInitializev+0x43c>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ac:	4b6e      	ldr	r3, [pc, #440]	; (8000768 <_Z16SystemInitializev+0x43c>)
 80005ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ba:	4b6b      	ldr	r3, [pc, #428]	; (8000768 <_Z16SystemInitializev+0x43c>)
 80005bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c0:	4a69      	ldr	r2, [pc, #420]	; (8000768 <_Z16SystemInitializev+0x43c>)
 80005c2:	f043 0302 	orr.w	r3, r3, #2
 80005c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005ca:	4b67      	ldr	r3, [pc, #412]	; (8000768 <_Z16SystemInitializev+0x43c>)
 80005cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d0:	f003 0302 	and.w	r3, r3, #2
 80005d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80005d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d8:	4b63      	ldr	r3, [pc, #396]	; (8000768 <_Z16SystemInitializev+0x43c>)
 80005da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005de:	4a62      	ldr	r2, [pc, #392]	; (8000768 <_Z16SystemInitializev+0x43c>)
 80005e0:	f043 0304 	orr.w	r3, r3, #4
 80005e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005e8:	4b5f      	ldr	r3, [pc, #380]	; (8000768 <_Z16SystemInitializev+0x43c>)
 80005ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ee:	f003 0304 	and.w	r3, r3, #4
 80005f2:	637b      	str	r3, [r7, #52]	; 0x34
 80005f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f6:	4b5c      	ldr	r3, [pc, #368]	; (8000768 <_Z16SystemInitializev+0x43c>)
 80005f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005fc:	4a5a      	ldr	r2, [pc, #360]	; (8000768 <_Z16SystemInitializev+0x43c>)
 80005fe:	f043 0308 	orr.w	r3, r3, #8
 8000602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000606:	4b58      	ldr	r3, [pc, #352]	; (8000768 <_Z16SystemInitializev+0x43c>)
 8000608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800060c:	f003 0308 	and.w	r3, r3, #8
 8000610:	633b      	str	r3, [r7, #48]	; 0x30
 8000612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000614:	4b54      	ldr	r3, [pc, #336]	; (8000768 <_Z16SystemInitializev+0x43c>)
 8000616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800061a:	4a53      	ldr	r2, [pc, #332]	; (8000768 <_Z16SystemInitializev+0x43c>)
 800061c:	f043 0310 	orr.w	r3, r3, #16
 8000620:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000624:	4b50      	ldr	r3, [pc, #320]	; (8000768 <_Z16SystemInitializev+0x43c>)
 8000626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062a:	f003 0310 	and.w	r3, r3, #16
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000632:	4b4d      	ldr	r3, [pc, #308]	; (8000768 <_Z16SystemInitializev+0x43c>)
 8000634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000638:	4a4b      	ldr	r2, [pc, #300]	; (8000768 <_Z16SystemInitializev+0x43c>)
 800063a:	f043 0320 	orr.w	r3, r3, #32
 800063e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000642:	4b49      	ldr	r3, [pc, #292]	; (8000768 <_Z16SystemInitializev+0x43c>)
 8000644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000648:	f003 0320 	and.w	r3, r3, #32
 800064c:	62bb      	str	r3, [r7, #40]	; 0x28
 800064e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000650:	4b45      	ldr	r3, [pc, #276]	; (8000768 <_Z16SystemInitializev+0x43c>)
 8000652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000656:	4a44      	ldr	r2, [pc, #272]	; (8000768 <_Z16SystemInitializev+0x43c>)
 8000658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800065c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000660:	4b41      	ldr	r3, [pc, #260]	; (8000768 <_Z16SystemInitializev+0x43c>)
 8000662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066e:	4b3e      	ldr	r3, [pc, #248]	; (8000768 <_Z16SystemInitializev+0x43c>)
 8000670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000674:	4a3c      	ldr	r2, [pc, #240]	; (8000768 <_Z16SystemInitializev+0x43c>)
 8000676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800067e:	4b3a      	ldr	r3, [pc, #232]	; (8000768 <_Z16SystemInitializev+0x43c>)
 8000680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000688:	623b      	str	r3, [r7, #32]
 800068a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800068c:	4b36      	ldr	r3, [pc, #216]	; (8000768 <_Z16SystemInitializev+0x43c>)
 800068e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000692:	4a35      	ldr	r2, [pc, #212]	; (8000768 <_Z16SystemInitializev+0x43c>)
 8000694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000698:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800069c:	4b32      	ldr	r3, [pc, #200]	; (8000768 <_Z16SystemInitializev+0x43c>)
 800069e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006a6:	61fb      	str	r3, [r7, #28]
 80006a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006aa:	4b2f      	ldr	r3, [pc, #188]	; (8000768 <_Z16SystemInitializev+0x43c>)
 80006ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b0:	4a2d      	ldr	r2, [pc, #180]	; (8000768 <_Z16SystemInitializev+0x43c>)
 80006b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ba:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <_Z16SystemInitializev+0x43c>)
 80006bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006c4:	61bb      	str	r3, [r7, #24]
 80006c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80006c8:	4b27      	ldr	r3, [pc, #156]	; (8000768 <_Z16SystemInitializev+0x43c>)
 80006ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ce:	4a26      	ldr	r2, [pc, #152]	; (8000768 <_Z16SystemInitializev+0x43c>)
 80006d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <_Z16SystemInitializev+0x43c>)
 80006da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	697b      	ldr	r3, [r7, #20]


  //-----------------
  //Enable DMA Clocks
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <_Z16SystemInitializev+0x43c>)
 80006e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006ec:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <_Z16SystemInitializev+0x43c>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <_Z16SystemInitializev+0x43c>)
 80006f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <_Z16SystemInitializev+0x43c>)
 8000706:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800070a:	4a17      	ldr	r2, [pc, #92]	; (8000768 <_Z16SystemInitializev+0x43c>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <_Z16SystemInitializev+0x43c>)
 8000716:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <_Z16SystemInitializev+0x43c>)
 8000724:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000728:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <_Z16SystemInitializev+0x43c>)
 800072a:	f043 0301 	orr.w	r3, r3, #1
 800072e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <_Z16SystemInitializev+0x43c>)
 8000734:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <_Z16SystemInitializev+0x43c>)
 8000742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <_Z16SystemInitializev+0x43c>)
 8000748:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800074c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <_Z16SystemInitializev+0x43c>)
 8000752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000756:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  //Return
  return QA_OK;
 800075e:	2300      	movs	r3, #0
}
 8000760:	4618      	mov	r0, r3
 8000762:	37c0      	adds	r7, #192	; 0xc0
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	58024400 	.word	0x58024400

0800076c <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void  NMI_Handler(void) {
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void  HardFault_Handler(void) {
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0
  while (1) {}
 800077e:	e7fe      	b.n	800077e <HardFault_Handler+0x4>

08000780 <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void  MemManage_Handler(void) {
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  while (1) {}
 8000784:	e7fe      	b.n	8000784 <MemManage_Handler+0x4>

08000786 <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void  BusFault_Handler(void) {
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  while (1) {}
 800078a:	e7fe      	b.n	800078a <BusFault_Handler+0x4>

0800078c <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void  UsageFault_Handler(void) {
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  while (1) {}
 8000790:	e7fe      	b.n	8000790 <UsageFault_Handler+0x4>

08000792 <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void  SVC_Handler(void) {
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void  DebugMon_Handler(void) {
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void  PendSV_Handler(void) {
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void  SysTick_Handler(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80007c0:	f000 f996 	bl	8000af0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80007c4:	f000 faa3 	bl	8000d0e <HAL_SYSTICK_IRQHandler>
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <main>:
//main
//Application entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32h743zitx.s
int main(void) {
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b087      	sub	sp, #28
 80007d0:	af00      	add	r7, sp, #0
  //System Initialization

	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIO Port and DMA clocks are also enabled by this method
	if (SystemInitialize()) {
 80007d2:	f7ff fdab 	bl	800032c <_Z16SystemInitializev>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf14      	ite	ne
 80007dc:	2301      	movne	r3, #1
 80007de:	2300      	moveq	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d000      	beq.n	80007e8 <main+0x1c>
		while (1) {}
 80007e6:	e7fe      	b.n	80007e6 <main+0x1a>


	//----------------------------------
  //Initialize the User LEDs using the QAD_GPIO_Output driver class
	//QAD_USERLED_**** definitions are defined in setup.hpp
	GPIO_UserLED_Green = new QAD_GPIO_Output(QAD_USERLED_GREEN_GPIO_PORT, QAD_USERLED_GREEN_GPIO_PIN);
 80007e8:	2014      	movs	r0, #20
 80007ea:	f001 fc67 	bl	80020bc <_Znwj>
 80007ee:	4603      	mov	r3, r0
 80007f0:	461c      	mov	r4, r3
 80007f2:	2201      	movs	r2, #1
 80007f4:	492d      	ldr	r1, [pc, #180]	; (80008ac <main+0xe0>)
 80007f6:	4620      	mov	r0, r4
 80007f8:	f001 fbda 	bl	8001fb0 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <main+0xe4>)
 80007fe:	601c      	str	r4, [r3, #0]
	GPIO_UserLED_Blue  = new QAD_GPIO_Output(QAD_USERLED_BLUE_GPIO_PORT, QAD_USERLED_BLUE_GPIO_PIN);
 8000800:	2014      	movs	r0, #20
 8000802:	f001 fc5b 	bl	80020bc <_Znwj>
 8000806:	4603      	mov	r3, r0
 8000808:	461c      	mov	r4, r3
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	4927      	ldr	r1, [pc, #156]	; (80008ac <main+0xe0>)
 800080e:	4620      	mov	r0, r4
 8000810:	f001 fbce 	bl	8001fb0 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <main+0xe8>)
 8000816:	601c      	str	r4, [r3, #0]
	GPIO_UserLED_Red   = new QAD_GPIO_Output(QAD_USERLED_RED_GPIO_PORT, QAD_USERLED_RED_GPIO_PIN);
 8000818:	2014      	movs	r0, #20
 800081a:	f001 fc4f 	bl	80020bc <_Znwj>
 800081e:	4603      	mov	r3, r0
 8000820:	461c      	mov	r4, r3
 8000822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000826:	4921      	ldr	r1, [pc, #132]	; (80008ac <main+0xe0>)
 8000828:	4620      	mov	r0, r4
 800082a:	f001 fbc1 	bl	8001fb0 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 800082e:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <main+0xec>)
 8000830:	601c      	str	r4, [r3, #0]


	//Test Yellow and Red LEDs
	GPIO_UserLED_Blue->on();
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <main+0xe8>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f001 fbdb 	bl	8001ff2 <_ZN15QAD_GPIO_Output2onEv>
	GPIO_UserLED_Red->on();
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <main+0xec>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f001 fbd6 	bl	8001ff2 <_ZN15QAD_GPIO_Output2onEv>
	//Processing Loop

	//Create processing loop timing variables
	uint32_t uTicks;
	uint32_t uCurTick;
	uint32_t uNewTick = HAL_GetTick();
 8000846:	f000 f967 	bl	8000b18 <HAL_GetTick>
 800084a:	6138      	str	r0, [r7, #16]
	uint32_t uOldTick = uNewTick;
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	60bb      	str	r3, [r7, #8]

		//----------------------------------
		//Frame Timing
		//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
		//uTicks is then used to calculate task timing below
		uCurTick = HAL_GetTick();
 8000850:	f000 f962 	bl	8000b18 <HAL_GetTick>
 8000854:	6078      	str	r0, [r7, #4]
		if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	429a      	cmp	r2, r3
 800085c:	d012      	beq.n	8000884 <main+0xb8>
			uOldTick = uNewTick;
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	60bb      	str	r3, [r7, #8]
			uNewTick = uCurTick;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	613b      	str	r3, [r7, #16]
			if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	429a      	cmp	r2, r3
 800086c:	d205      	bcs.n	800087a <main+0xae>
				uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	3b01      	subs	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	e006      	b.n	8000888 <main+0xbc>
			} else {
				uTicks = (uNewTick - uOldTick);
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	e001      	b.n	8000888 <main+0xbc>
			}

		} else {
			uTicks = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	4413      	add	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) {
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000896:	d3db      	bcc.n	8000850 <main+0x84>
    	GPIO_UserLED_Green->toggle();
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <main+0xe4>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f001 fbce 	bl	800203e <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80008a8:	60fb      	str	r3, [r7, #12]
		uCurTick = HAL_GetTick();
 80008aa:	e7d1      	b.n	8000850 <main+0x84>
 80008ac:	58020400 	.word	0x58020400
 80008b0:	24000090 	.word	0x24000090
 80008b4:	24000094 	.word	0x24000094
 80008b8:	24000098 	.word	0x24000098

080008bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
	return 1;
 80008c0:	2301      	movs	r3, #1
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <_kill>:

int _kill(int pid, int sig)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80008d6:	f001 fc13 	bl	8002100 <__errno>
 80008da:	4603      	mov	r3, r0
 80008dc:	2216      	movs	r2, #22
 80008de:	601a      	str	r2, [r3, #0]
	return -1;
 80008e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <_exit>:

void _exit (int status)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80008f4:	f04f 31ff 	mov.w	r1, #4294967295
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff ffe7 	bl	80008cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80008fe:	e7fe      	b.n	80008fe <_exit+0x12>

08000900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000908:	4a14      	ldr	r2, [pc, #80]	; (800095c <_sbrk+0x5c>)
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <_sbrk+0x60>)
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <_sbrk+0x64>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d102      	bne.n	8000922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <_sbrk+0x64>)
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <_sbrk+0x68>)
 8000920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <_sbrk+0x64>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	429a      	cmp	r2, r3
 800092e:	d207      	bcs.n	8000940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000930:	f001 fbe6 	bl	8002100 <__errno>
 8000934:	4603      	mov	r3, r0
 8000936:	220c      	movs	r2, #12
 8000938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	e009      	b.n	8000954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <_sbrk+0x64>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4413      	add	r3, r2
 800094e:	4a05      	ldr	r2, [pc, #20]	; (8000964 <_sbrk+0x64>)
 8000950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000952:	68fb      	ldr	r3, [r7, #12]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	24080000 	.word	0x24080000
 8000960:	00000400 	.word	0x00000400
 8000964:	2400009c 	.word	0x2400009c
 8000968:	240000c0 	.word	0x240000c0

0800096c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000970:	4b39      	ldr	r3, [pc, #228]	; (8000a58 <SystemInit+0xec>)
 8000972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000976:	4a38      	ldr	r2, [pc, #224]	; (8000a58 <SystemInit+0xec>)
 8000978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800097c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000980:	4b36      	ldr	r3, [pc, #216]	; (8000a5c <SystemInit+0xf0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f003 030f 	and.w	r3, r3, #15
 8000988:	2b06      	cmp	r3, #6
 800098a:	d807      	bhi.n	800099c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800098c:	4b33      	ldr	r3, [pc, #204]	; (8000a5c <SystemInit+0xf0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f023 030f 	bic.w	r3, r3, #15
 8000994:	4a31      	ldr	r2, [pc, #196]	; (8000a5c <SystemInit+0xf0>)
 8000996:	f043 0307 	orr.w	r3, r3, #7
 800099a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800099c:	4b30      	ldr	r3, [pc, #192]	; (8000a60 <SystemInit+0xf4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a2f      	ldr	r2, [pc, #188]	; (8000a60 <SystemInit+0xf4>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009a8:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <SystemInit+0xf4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009ae:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <SystemInit+0xf4>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	492b      	ldr	r1, [pc, #172]	; (8000a60 <SystemInit+0xf4>)
 80009b4:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <SystemInit+0xf8>)
 80009b6:	4013      	ands	r3, r2
 80009b8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009ba:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <SystemInit+0xf0>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f003 0308 	and.w	r3, r3, #8
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d007      	beq.n	80009d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009c6:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <SystemInit+0xf0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f023 030f 	bic.w	r3, r3, #15
 80009ce:	4a23      	ldr	r2, [pc, #140]	; (8000a5c <SystemInit+0xf0>)
 80009d0:	f043 0307 	orr.w	r3, r3, #7
 80009d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009d6:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <SystemInit+0xf4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <SystemInit+0xf4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009e2:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <SystemInit+0xf4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009e8:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <SystemInit+0xf4>)
 80009ea:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <SystemInit+0xfc>)
 80009ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009ee:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <SystemInit+0xf4>)
 80009f0:	4a1e      	ldr	r2, [pc, #120]	; (8000a6c <SystemInit+0x100>)
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <SystemInit+0xf4>)
 80009f6:	4a1e      	ldr	r2, [pc, #120]	; (8000a70 <SystemInit+0x104>)
 80009f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009fa:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <SystemInit+0xf4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <SystemInit+0xf4>)
 8000a02:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <SystemInit+0x104>)
 8000a04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <SystemInit+0xf4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <SystemInit+0xf4>)
 8000a0e:	4a18      	ldr	r2, [pc, #96]	; (8000a70 <SystemInit+0x104>)
 8000a10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <SystemInit+0xf4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <SystemInit+0xf4>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <SystemInit+0xf4>)
 8000a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <SystemInit+0xf4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a2a:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <SystemInit+0x108>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <SystemInit+0x10c>)
 8000a30:	4013      	ands	r3, r2
 8000a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a36:	d202      	bcs.n	8000a3e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a38:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <SystemInit+0x110>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <SystemInit+0x114>)
 8000a40:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a44:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a46:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <SystemInit+0xec>)
 8000a48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a4c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00
 8000a5c:	52002000 	.word	0x52002000
 8000a60:	58024400 	.word	0x58024400
 8000a64:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a68:	02020200 	.word	0x02020200
 8000a6c:	01ff0000 	.word	0x01ff0000
 8000a70:	01010280 	.word	0x01010280
 8000a74:	5c001000 	.word	0x5c001000
 8000a78:	ffff0000 	.word	0xffff0000
 8000a7c:	51008108 	.word	0x51008108
 8000a80:	52004000 	.word	0x52004000

08000a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_InitTick+0x60>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d101      	bne.n	8000a98 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	e021      	b.n	8000adc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <HAL_InitTick+0x64>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_InitTick+0x60>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f921 	bl	8000cf6 <HAL_SYSTICK_Config>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00e      	b.n	8000adc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d80a      	bhi.n	8000ada <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f000 f8f9 	bl	8000cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <HAL_InitTick+0x68>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	2400000c 	.word	0x2400000c
 8000ae8:	24000000 	.word	0x24000000
 8000aec:	24000008 	.word	0x24000008

08000af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_IncTick+0x20>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_IncTick+0x24>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <HAL_IncTick+0x24>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	2400000c 	.word	0x2400000c
 8000b14:	240000ac 	.word	0x240000ac

08000b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <HAL_GetTick+0x14>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	240000ac 	.word	0x240000ac

08000b30 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <HAL_GetREVID+0x14>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	0c1b      	lsrs	r3, r3, #16
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	5c001000 	.word	0x5c001000

08000b48 <__NVIC_SetPriorityGrouping>:
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <__NVIC_SetPriorityGrouping+0x40>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b64:	4013      	ands	r3, r2
 8000b66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b72:	4313      	orrs	r3, r2
 8000b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <__NVIC_SetPriorityGrouping+0x40>)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	60d3      	str	r3, [r2, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00
 8000b8c:	05fa0000 	.word	0x05fa0000

08000b90 <__NVIC_GetPriorityGrouping>:
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	f003 0307 	and.w	r3, r3, #7
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_SetPriority>:
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db0a      	blt.n	8000bd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	490c      	ldr	r1, [pc, #48]	; (8000bf8 <__NVIC_SetPriority+0x4c>)
 8000bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bca:	0112      	lsls	r2, r2, #4
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	440b      	add	r3, r1
 8000bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bd4:	e00a      	b.n	8000bec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4908      	ldr	r1, [pc, #32]	; (8000bfc <__NVIC_SetPriority+0x50>)
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	3b04      	subs	r3, #4
 8000be4:	0112      	lsls	r2, r2, #4
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	440b      	add	r3, r1
 8000bea:	761a      	strb	r2, [r3, #24]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <NVIC_EncodePriority>:
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f1c3 0307 	rsb	r3, r3, #7
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf28      	it	cs
 8000c1e:	2304      	movcs	r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d902      	bls.n	8000c30 <NVIC_EncodePriority+0x30>
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3b03      	subs	r3, #3
 8000c2e:	e000      	b.n	8000c32 <NVIC_EncodePriority+0x32>
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	401a      	ands	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	43d9      	mvns	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	4313      	orrs	r3, r2
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3724      	adds	r7, #36	; 0x24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c78:	d301      	bcc.n	8000c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00f      	b.n	8000c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <SysTick_Config+0x40>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c86:	210f      	movs	r1, #15
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f7ff ff8e 	bl	8000bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <SysTick_Config+0x40>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <SysTick_Config+0x40>)
 8000c98:	2207      	movs	r2, #7
 8000c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	e000e010 	.word	0xe000e010

08000cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ff47 	bl	8000b48 <__NVIC_SetPriorityGrouping>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd0:	f7ff ff5e 	bl	8000b90 <__NVIC_GetPriorityGrouping>
 8000cd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	68b9      	ldr	r1, [r7, #8]
 8000cda:	6978      	ldr	r0, [r7, #20]
 8000cdc:	f7ff ff90 	bl	8000c00 <NVIC_EncodePriority>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff5f 	bl	8000bac <__NVIC_SetPriority>
}
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ffb2 	bl	8000c68 <SysTick_Config>
 8000d04:	4603      	mov	r3, r0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000d12:	f000 f802 	bl	8000d1a <HAL_SYSTICK_Callback>
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000d36:	4b89      	ldr	r3, [pc, #548]	; (8000f5c <HAL_GPIO_Init+0x234>)
 8000d38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d3a:	e194      	b.n	8001066 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	2101      	movs	r1, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa01 f303 	lsl.w	r3, r1, r3
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f000 8186 	beq.w	8001060 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d00b      	beq.n	8000d74 <HAL_GPIO_Init+0x4c>
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d007      	beq.n	8000d74 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d68:	2b11      	cmp	r3, #17
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b12      	cmp	r3, #18
 8000d72:	d130      	bne.n	8000dd6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000daa:	2201      	movs	r2, #1
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	091b      	lsrs	r3, r3, #4
 8000dc0:	f003 0201 	and.w	r2, r3, #1
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0xee>
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b12      	cmp	r3, #18
 8000e14:	d123      	bne.n	8000e5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	08da      	lsrs	r2, r3, #3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3208      	adds	r2, #8
 8000e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	691a      	ldr	r2, [r3, #16]
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	f003 0307 	and.w	r3, r3, #7
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	08da      	lsrs	r2, r3, #3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3208      	adds	r2, #8
 8000e58:	69b9      	ldr	r1, [r7, #24]
 8000e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0203 	and.w	r2, r3, #3
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 80e0 	beq.w	8001060 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea0:	4b2f      	ldr	r3, [pc, #188]	; (8000f60 <HAL_GPIO_Init+0x238>)
 8000ea2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ea6:	4a2e      	ldr	r2, [pc, #184]	; (8000f60 <HAL_GPIO_Init+0x238>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000eb0:	4b2b      	ldr	r3, [pc, #172]	; (8000f60 <HAL_GPIO_Init+0x238>)
 8000eb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ebe:	4a29      	ldr	r2, [pc, #164]	; (8000f64 <HAL_GPIO_Init+0x23c>)
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a20      	ldr	r2, [pc, #128]	; (8000f68 <HAL_GPIO_Init+0x240>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d052      	beq.n	8000f90 <HAL_GPIO_Init+0x268>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a1f      	ldr	r2, [pc, #124]	; (8000f6c <HAL_GPIO_Init+0x244>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d031      	beq.n	8000f56 <HAL_GPIO_Init+0x22e>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a1e      	ldr	r2, [pc, #120]	; (8000f70 <HAL_GPIO_Init+0x248>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d02b      	beq.n	8000f52 <HAL_GPIO_Init+0x22a>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <HAL_GPIO_Init+0x24c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d025      	beq.n	8000f4e <HAL_GPIO_Init+0x226>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <HAL_GPIO_Init+0x250>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d01f      	beq.n	8000f4a <HAL_GPIO_Init+0x222>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a1b      	ldr	r2, [pc, #108]	; (8000f7c <HAL_GPIO_Init+0x254>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d019      	beq.n	8000f46 <HAL_GPIO_Init+0x21e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <HAL_GPIO_Init+0x258>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d013      	beq.n	8000f42 <HAL_GPIO_Init+0x21a>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <HAL_GPIO_Init+0x25c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d00d      	beq.n	8000f3e <HAL_GPIO_Init+0x216>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a18      	ldr	r2, [pc, #96]	; (8000f88 <HAL_GPIO_Init+0x260>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d007      	beq.n	8000f3a <HAL_GPIO_Init+0x212>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a17      	ldr	r2, [pc, #92]	; (8000f8c <HAL_GPIO_Init+0x264>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d101      	bne.n	8000f36 <HAL_GPIO_Init+0x20e>
 8000f32:	2309      	movs	r3, #9
 8000f34:	e02d      	b.n	8000f92 <HAL_GPIO_Init+0x26a>
 8000f36:	230a      	movs	r3, #10
 8000f38:	e02b      	b.n	8000f92 <HAL_GPIO_Init+0x26a>
 8000f3a:	2308      	movs	r3, #8
 8000f3c:	e029      	b.n	8000f92 <HAL_GPIO_Init+0x26a>
 8000f3e:	2307      	movs	r3, #7
 8000f40:	e027      	b.n	8000f92 <HAL_GPIO_Init+0x26a>
 8000f42:	2306      	movs	r3, #6
 8000f44:	e025      	b.n	8000f92 <HAL_GPIO_Init+0x26a>
 8000f46:	2305      	movs	r3, #5
 8000f48:	e023      	b.n	8000f92 <HAL_GPIO_Init+0x26a>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	e021      	b.n	8000f92 <HAL_GPIO_Init+0x26a>
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e01f      	b.n	8000f92 <HAL_GPIO_Init+0x26a>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e01d      	b.n	8000f92 <HAL_GPIO_Init+0x26a>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e01b      	b.n	8000f92 <HAL_GPIO_Init+0x26a>
 8000f5a:	bf00      	nop
 8000f5c:	58000080 	.word	0x58000080
 8000f60:	58024400 	.word	0x58024400
 8000f64:	58000400 	.word	0x58000400
 8000f68:	58020000 	.word	0x58020000
 8000f6c:	58020400 	.word	0x58020400
 8000f70:	58020800 	.word	0x58020800
 8000f74:	58020c00 	.word	0x58020c00
 8000f78:	58021000 	.word	0x58021000
 8000f7c:	58021400 	.word	0x58021400
 8000f80:	58021800 	.word	0x58021800
 8000f84:	58021c00 	.word	0x58021c00
 8000f88:	58022000 	.word	0x58022000
 8000f8c:	58022400 	.word	0x58022400
 8000f90:	2300      	movs	r3, #0
 8000f92:	69fa      	ldr	r2, [r7, #28]
 8000f94:	f002 0203 	and.w	r2, r2, #3
 8000f98:	0092      	lsls	r2, r2, #2
 8000f9a:	4093      	lsls	r3, r2
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa2:	4938      	ldr	r1, [pc, #224]	; (8001084 <HAL_GPIO_Init+0x35c>)
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800102a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001058:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	3301      	adds	r3, #1
 8001064:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa22 f303 	lsr.w	r3, r2, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	f47f ae63 	bne.w	8000d3c <HAL_GPIO_Init+0x14>
  }
}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	3724      	adds	r7, #36	; 0x24
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	58000400 	.word	0x58000400

08001088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
 8001094:	4613      	mov	r3, r2
 8001096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001098:	787b      	ldrb	r3, [r7, #1]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800109e:	887a      	ldrh	r2, [r7, #2]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80010a4:	e003      	b.n	80010ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80010a6:	887b      	ldrh	r3, [r7, #2]
 80010a8:	041a      	lsls	r2, r3, #16
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	619a      	str	r2, [r3, #24]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <HAL_PWREx_ConfigSupply+0x70>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d00a      	beq.n	80010e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <HAL_PWREx_ConfigSupply+0x70>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d001      	beq.n	80010e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e01f      	b.n	8001122 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e01d      	b.n	8001122 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_PWREx_ConfigSupply+0x70>)
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	f023 0207 	bic.w	r2, r3, #7
 80010ee:	490f      	ldr	r1, [pc, #60]	; (800112c <HAL_PWREx_ConfigSupply+0x70>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80010f6:	f7ff fd0f 	bl	8000b18 <HAL_GetTick>
 80010fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010fc:	e009      	b.n	8001112 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80010fe:	f7ff fd0b 	bl	8000b18 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800110c:	d901      	bls.n	8001112 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e007      	b.n	8001122 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_PWREx_ConfigSupply+0x70>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800111a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800111e:	d1ee      	bne.n	80010fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	58024800 	.word	0x58024800

08001130 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	; 0x30
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e3ff      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8087 	beq.w	800125e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001150:	4b99      	ldr	r3, [pc, #612]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800115a:	4b97      	ldr	r3, [pc, #604]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 800115c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001162:	2b10      	cmp	r3, #16
 8001164:	d007      	beq.n	8001176 <HAL_RCC_OscConfig+0x46>
 8001166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001168:	2b18      	cmp	r3, #24
 800116a:	d110      	bne.n	800118e <HAL_RCC_OscConfig+0x5e>
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d10b      	bne.n	800118e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001176:	4b90      	ldr	r3, [pc, #576]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d06c      	beq.n	800125c <HAL_RCC_OscConfig+0x12c>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d168      	bne.n	800125c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e3d9      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001196:	d106      	bne.n	80011a6 <HAL_RCC_OscConfig+0x76>
 8001198:	4b87      	ldr	r3, [pc, #540]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a86      	ldr	r2, [pc, #536]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 800119e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	e02e      	b.n	8001204 <HAL_RCC_OscConfig+0xd4>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10c      	bne.n	80011c8 <HAL_RCC_OscConfig+0x98>
 80011ae:	4b82      	ldr	r3, [pc, #520]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a81      	ldr	r2, [pc, #516]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	4b7f      	ldr	r3, [pc, #508]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a7e      	ldr	r2, [pc, #504]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	e01d      	b.n	8001204 <HAL_RCC_OscConfig+0xd4>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d0:	d10c      	bne.n	80011ec <HAL_RCC_OscConfig+0xbc>
 80011d2:	4b79      	ldr	r3, [pc, #484]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a78      	ldr	r2, [pc, #480]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	4b76      	ldr	r3, [pc, #472]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a75      	ldr	r2, [pc, #468]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e00b      	b.n	8001204 <HAL_RCC_OscConfig+0xd4>
 80011ec:	4b72      	ldr	r3, [pc, #456]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a71      	ldr	r2, [pc, #452]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b6f      	ldr	r3, [pc, #444]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a6e      	ldr	r2, [pc, #440]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d013      	beq.n	8001234 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120c:	f7ff fc84 	bl	8000b18 <HAL_GetTick>
 8001210:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001214:	f7ff fc80 	bl	8000b18 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b64      	cmp	r3, #100	; 0x64
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e38d      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001226:	4b64      	ldr	r3, [pc, #400]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f0      	beq.n	8001214 <HAL_RCC_OscConfig+0xe4>
 8001232:	e014      	b.n	800125e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001234:	f7ff fc70 	bl	8000b18 <HAL_GetTick>
 8001238:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800123c:	f7ff fc6c 	bl	8000b18 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b64      	cmp	r3, #100	; 0x64
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e379      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800124e:	4b5a      	ldr	r3, [pc, #360]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f0      	bne.n	800123c <HAL_RCC_OscConfig+0x10c>
 800125a:	e000      	b.n	800125e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 80ae 	beq.w	80013c8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800126c:	4b52      	ldr	r3, [pc, #328]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001274:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001276:	4b50      	ldr	r3, [pc, #320]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <HAL_RCC_OscConfig+0x162>
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	2b18      	cmp	r3, #24
 8001286:	d13a      	bne.n	80012fe <HAL_RCC_OscConfig+0x1ce>
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d135      	bne.n	80012fe <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001292:	4b49      	ldr	r3, [pc, #292]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <HAL_RCC_OscConfig+0x17a>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e34b      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012aa:	f7ff fc41 	bl	8000b30 <HAL_GetREVID>
 80012ae:	4603      	mov	r3, r0
 80012b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d817      	bhi.n	80012e8 <HAL_RCC_OscConfig+0x1b8>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	2b40      	cmp	r3, #64	; 0x40
 80012be:	d108      	bne.n	80012d2 <HAL_RCC_OscConfig+0x1a2>
 80012c0:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80012c8:	4a3b      	ldr	r2, [pc, #236]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012d0:	e07a      	b.n	80013c8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d2:	4b39      	ldr	r3, [pc, #228]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	031b      	lsls	r3, r3, #12
 80012e0:	4935      	ldr	r1, [pc, #212]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012e6:	e06f      	b.n	80013c8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e8:	4b33      	ldr	r3, [pc, #204]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	061b      	lsls	r3, r3, #24
 80012f6:	4930      	ldr	r1, [pc, #192]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012fc:	e064      	b.n	80013c8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d045      	beq.n	8001392 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001306:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 0219 	bic.w	r2, r3, #25
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	4929      	ldr	r1, [pc, #164]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001314:	4313      	orrs	r3, r2
 8001316:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001318:	f7ff fbfe 	bl	8000b18 <HAL_GetTick>
 800131c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001320:	f7ff fbfa 	bl	8000b18 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e307      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001332:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133e:	f7ff fbf7 	bl	8000b30 <HAL_GetREVID>
 8001342:	4603      	mov	r3, r0
 8001344:	f241 0203 	movw	r2, #4099	; 0x1003
 8001348:	4293      	cmp	r3, r2
 800134a:	d817      	bhi.n	800137c <HAL_RCC_OscConfig+0x24c>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	2b40      	cmp	r3, #64	; 0x40
 8001352:	d108      	bne.n	8001366 <HAL_RCC_OscConfig+0x236>
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800135c:	4a16      	ldr	r2, [pc, #88]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 800135e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001362:	6053      	str	r3, [r2, #4]
 8001364:	e030      	b.n	80013c8 <HAL_RCC_OscConfig+0x298>
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	031b      	lsls	r3, r3, #12
 8001374:	4910      	ldr	r1, [pc, #64]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
 800137a:	e025      	b.n	80013c8 <HAL_RCC_OscConfig+0x298>
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	061b      	lsls	r3, r3, #24
 800138a:	490b      	ldr	r1, [pc, #44]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
 8001390:	e01a      	b.n	80013c8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139e:	f7ff fbbb 	bl	8000b18 <HAL_GetTick>
 80013a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013a4:	e00a      	b.n	80013bc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a6:	f7ff fbb7 	bl	8000b18 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d903      	bls.n	80013bc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e2c4      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
 80013b8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013bc:	4ba4      	ldr	r3, [pc, #656]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1ee      	bne.n	80013a6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0310 	and.w	r3, r3, #16
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 80a9 	beq.w	8001528 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013d6:	4b9e      	ldr	r3, [pc, #632]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013e0:	4b9b      	ldr	r3, [pc, #620]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 80013e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d007      	beq.n	80013fc <HAL_RCC_OscConfig+0x2cc>
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2b18      	cmp	r3, #24
 80013f0:	d13a      	bne.n	8001468 <HAL_RCC_OscConfig+0x338>
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d135      	bne.n	8001468 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013fc:	4b94      	ldr	r3, [pc, #592]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <HAL_RCC_OscConfig+0x2e4>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	2b80      	cmp	r3, #128	; 0x80
 800140e:	d001      	beq.n	8001414 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e296      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001414:	f7ff fb8c 	bl	8000b30 <HAL_GetREVID>
 8001418:	4603      	mov	r3, r0
 800141a:	f241 0203 	movw	r2, #4099	; 0x1003
 800141e:	4293      	cmp	r3, r2
 8001420:	d817      	bhi.n	8001452 <HAL_RCC_OscConfig+0x322>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	2b20      	cmp	r3, #32
 8001428:	d108      	bne.n	800143c <HAL_RCC_OscConfig+0x30c>
 800142a:	4b89      	ldr	r3, [pc, #548]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001432:	4a87      	ldr	r2, [pc, #540]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 8001434:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001438:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800143a:	e075      	b.n	8001528 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800143c:	4b84      	ldr	r3, [pc, #528]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	069b      	lsls	r3, r3, #26
 800144a:	4981      	ldr	r1, [pc, #516]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001450:	e06a      	b.n	8001528 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001452:	4b7f      	ldr	r3, [pc, #508]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	061b      	lsls	r3, r3, #24
 8001460:	497b      	ldr	r1, [pc, #492]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 8001462:	4313      	orrs	r3, r2
 8001464:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001466:	e05f      	b.n	8001528 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d042      	beq.n	80014f6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001470:	4b77      	ldr	r3, [pc, #476]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a76      	ldr	r2, [pc, #472]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 8001476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800147a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fb4c 	bl	8000b18 <HAL_GetTick>
 8001480:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001484:	f7ff fb48 	bl	8000b18 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e255      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001496:	4b6e      	ldr	r3, [pc, #440]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014a2:	f7ff fb45 	bl	8000b30 <HAL_GetREVID>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d817      	bhi.n	80014e0 <HAL_RCC_OscConfig+0x3b0>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	2b20      	cmp	r3, #32
 80014b6:	d108      	bne.n	80014ca <HAL_RCC_OscConfig+0x39a>
 80014b8:	4b65      	ldr	r3, [pc, #404]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80014c0:	4a63      	ldr	r2, [pc, #396]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 80014c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014c6:	6053      	str	r3, [r2, #4]
 80014c8:	e02e      	b.n	8001528 <HAL_RCC_OscConfig+0x3f8>
 80014ca:	4b61      	ldr	r3, [pc, #388]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	069b      	lsls	r3, r3, #26
 80014d8:	495d      	ldr	r1, [pc, #372]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	604b      	str	r3, [r1, #4]
 80014de:	e023      	b.n	8001528 <HAL_RCC_OscConfig+0x3f8>
 80014e0:	4b5b      	ldr	r3, [pc, #364]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	061b      	lsls	r3, r3, #24
 80014ee:	4958      	ldr	r1, [pc, #352]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	60cb      	str	r3, [r1, #12]
 80014f4:	e018      	b.n	8001528 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80014f6:	4b56      	ldr	r3, [pc, #344]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a55      	ldr	r2, [pc, #340]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 80014fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001502:	f7ff fb09 	bl	8000b18 <HAL_GetTick>
 8001506:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800150a:	f7ff fb05 	bl	8000b18 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e212      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800151c:	4b4c      	ldr	r3, [pc, #304]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f0      	bne.n	800150a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b00      	cmp	r3, #0
 8001532:	d036      	beq.n	80015a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d019      	beq.n	8001570 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153c:	4b44      	ldr	r3, [pc, #272]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 800153e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001540:	4a43      	ldr	r2, [pc, #268]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001548:	f7ff fae6 	bl	8000b18 <HAL_GetTick>
 800154c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001550:	f7ff fae2 	bl	8000b18 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e1ef      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001562:	4b3b      	ldr	r3, [pc, #236]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 8001564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x420>
 800156e:	e018      	b.n	80015a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001570:	4b37      	ldr	r3, [pc, #220]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 8001572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001574:	4a36      	ldr	r2, [pc, #216]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 8001576:	f023 0301 	bic.w	r3, r3, #1
 800157a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157c:	f7ff facc 	bl	8000b18 <HAL_GetTick>
 8001580:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001584:	f7ff fac8 	bl	8000b18 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e1d5      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001596:	4b2e      	ldr	r3, [pc, #184]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 8001598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0320 	and.w	r3, r3, #32
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d036      	beq.n	800161c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d019      	beq.n	80015ea <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a25      	ldr	r2, [pc, #148]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 80015bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80015c2:	f7ff faa9 	bl	8000b18 <HAL_GetTick>
 80015c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80015ca:	f7ff faa5 	bl	8000b18 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e1b2      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x49a>
 80015e8:	e018      	b.n	800161c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a18      	ldr	r2, [pc, #96]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 80015f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fa8f 	bl	8000b18 <HAL_GetTick>
 80015fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80015fe:	f7ff fa8b 	bl	8000b18 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e198      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <HAL_RCC_OscConfig+0x520>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1f0      	bne.n	80015fe <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 8085 	beq.w	8001734 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <HAL_RCC_OscConfig+0x524>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a09      	ldr	r2, [pc, #36]	; (8001654 <HAL_RCC_OscConfig+0x524>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001634:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001636:	f7ff fa6f 	bl	8000b18 <HAL_GetTick>
 800163a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800163c:	e00c      	b.n	8001658 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800163e:	f7ff fa6b 	bl	8000b18 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b64      	cmp	r3, #100	; 0x64
 800164a:	d905      	bls.n	8001658 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e178      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
 8001650:	58024400 	.word	0x58024400
 8001654:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001658:	4b96      	ldr	r3, [pc, #600]	; (80018b4 <HAL_RCC_OscConfig+0x784>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0ec      	beq.n	800163e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d106      	bne.n	800167a <HAL_RCC_OscConfig+0x54a>
 800166c:	4b92      	ldr	r3, [pc, #584]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 800166e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001670:	4a91      	ldr	r2, [pc, #580]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6713      	str	r3, [r2, #112]	; 0x70
 8001678:	e02d      	b.n	80016d6 <HAL_RCC_OscConfig+0x5a6>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10c      	bne.n	800169c <HAL_RCC_OscConfig+0x56c>
 8001682:	4b8d      	ldr	r3, [pc, #564]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 8001684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001686:	4a8c      	ldr	r2, [pc, #560]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 8001688:	f023 0301 	bic.w	r3, r3, #1
 800168c:	6713      	str	r3, [r2, #112]	; 0x70
 800168e:	4b8a      	ldr	r3, [pc, #552]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	4a89      	ldr	r2, [pc, #548]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 8001694:	f023 0304 	bic.w	r3, r3, #4
 8001698:	6713      	str	r3, [r2, #112]	; 0x70
 800169a:	e01c      	b.n	80016d6 <HAL_RCC_OscConfig+0x5a6>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b05      	cmp	r3, #5
 80016a2:	d10c      	bne.n	80016be <HAL_RCC_OscConfig+0x58e>
 80016a4:	4b84      	ldr	r3, [pc, #528]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 80016a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a8:	4a83      	ldr	r2, [pc, #524]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	6713      	str	r3, [r2, #112]	; 0x70
 80016b0:	4b81      	ldr	r3, [pc, #516]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 80016b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b4:	4a80      	ldr	r2, [pc, #512]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6713      	str	r3, [r2, #112]	; 0x70
 80016bc:	e00b      	b.n	80016d6 <HAL_RCC_OscConfig+0x5a6>
 80016be:	4b7e      	ldr	r3, [pc, #504]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c2:	4a7d      	ldr	r2, [pc, #500]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 80016c4:	f023 0301 	bic.w	r3, r3, #1
 80016c8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ca:	4b7b      	ldr	r3, [pc, #492]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ce:	4a7a      	ldr	r2, [pc, #488]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 80016d0:	f023 0304 	bic.w	r3, r3, #4
 80016d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d015      	beq.n	800170a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016de:	f7ff fa1b 	bl	8000b18 <HAL_GetTick>
 80016e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e6:	f7ff fa17 	bl	8000b18 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e122      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016fc:	4b6e      	ldr	r3, [pc, #440]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 80016fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0ee      	beq.n	80016e6 <HAL_RCC_OscConfig+0x5b6>
 8001708:	e014      	b.n	8001734 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170a:	f7ff fa05 	bl	8000b18 <HAL_GetTick>
 800170e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001710:	e00a      	b.n	8001728 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001712:	f7ff fa01 	bl	8000b18 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001720:	4293      	cmp	r3, r2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e10c      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001728:	4b63      	ldr	r3, [pc, #396]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 800172a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1ee      	bne.n	8001712 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 8101 	beq.w	8001940 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800173e:	4b5e      	ldr	r3, [pc, #376]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001746:	2b18      	cmp	r3, #24
 8001748:	f000 80bc 	beq.w	80018c4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	2b02      	cmp	r3, #2
 8001752:	f040 8095 	bne.w	8001880 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001756:	4b58      	ldr	r3, [pc, #352]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a57      	ldr	r2, [pc, #348]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 800175c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001762:	f7ff f9d9 	bl	8000b18 <HAL_GetTick>
 8001766:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176a:	f7ff f9d5 	bl	8000b18 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e0e2      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800177c:	4b4e      	ldr	r3, [pc, #312]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1f0      	bne.n	800176a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001788:	4b4b      	ldr	r3, [pc, #300]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 800178a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800178c:	4b4b      	ldr	r3, [pc, #300]	; (80018bc <HAL_RCC_OscConfig+0x78c>)
 800178e:	4013      	ands	r3, r2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	430a      	orrs	r2, r1
 800179c:	4946      	ldr	r1, [pc, #280]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	628b      	str	r3, [r1, #40]	; 0x28
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	3b01      	subs	r3, #1
 80017a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b0:	3b01      	subs	r3, #1
 80017b2:	025b      	lsls	r3, r3, #9
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017bc:	3b01      	subs	r3, #1
 80017be:	041b      	lsls	r3, r3, #16
 80017c0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ca:	3b01      	subs	r3, #1
 80017cc:	061b      	lsls	r3, r3, #24
 80017ce:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80017d2:	4939      	ldr	r1, [pc, #228]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80017d8:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 80017da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017dc:	4a36      	ldr	r2, [pc, #216]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80017e4:	4b34      	ldr	r3, [pc, #208]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 80017e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017e8:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <HAL_RCC_OscConfig+0x790>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017f0:	00d2      	lsls	r2, r2, #3
 80017f2:	4931      	ldr	r1, [pc, #196]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80017f8:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	f023 020c 	bic.w	r2, r3, #12
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	492c      	ldr	r1, [pc, #176]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 8001806:	4313      	orrs	r3, r2
 8001808:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800180a:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	f023 0202 	bic.w	r2, r3, #2
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	4928      	ldr	r1, [pc, #160]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 8001818:	4313      	orrs	r3, r2
 800181a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800181c:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 800181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001820:	4a25      	ldr	r2, [pc, #148]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 8001822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001826:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001828:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	4a22      	ldr	r2, [pc, #136]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 800182e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001834:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	4a1f      	ldr	r2, [pc, #124]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 800183a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800183e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	4a1c      	ldr	r2, [pc, #112]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800184c:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a19      	ldr	r2, [pc, #100]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 8001852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff f95e 	bl	8000b18 <HAL_GetTick>
 800185c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff f95a 	bl	8000b18 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e067      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x730>
 800187e:	e05f      	b.n	8001940 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0c      	ldr	r2, [pc, #48]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 8001886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800188a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff f944 	bl	8000b18 <HAL_GetTick>
 8001890:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff f940 	bl	8000b18 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e04d      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018a6:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <HAL_RCC_OscConfig+0x788>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x764>
 80018b2:	e045      	b.n	8001940 <HAL_RCC_OscConfig+0x810>
 80018b4:	58024800 	.word	0x58024800
 80018b8:	58024400 	.word	0x58024400
 80018bc:	fffffc0c 	.word	0xfffffc0c
 80018c0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <HAL_RCC_OscConfig+0x81c>)
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <HAL_RCC_OscConfig+0x81c>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d031      	beq.n	800193c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	f003 0203 	and.w	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d12a      	bne.n	800193c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d122      	bne.n	800193c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001902:	429a      	cmp	r2, r3
 8001904:	d11a      	bne.n	800193c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	0a5b      	lsrs	r3, r3, #9
 800190a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001912:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d111      	bne.n	800193c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	0c1b      	lsrs	r3, r3, #16
 800191c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001924:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001926:	429a      	cmp	r2, r3
 8001928:	d108      	bne.n	800193c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	0e1b      	lsrs	r3, r3, #24
 800192e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001936:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3730      	adds	r7, #48	; 0x30
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	58024400 	.word	0x58024400

08001950 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e19c      	b.n	8001c9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001964:	4b8a      	ldr	r3, [pc, #552]	; (8001b90 <HAL_RCC_ClockConfig+0x240>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 030f 	and.w	r3, r3, #15
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d910      	bls.n	8001994 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b87      	ldr	r3, [pc, #540]	; (8001b90 <HAL_RCC_ClockConfig+0x240>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 020f 	bic.w	r2, r3, #15
 800197a:	4985      	ldr	r1, [pc, #532]	; (8001b90 <HAL_RCC_ClockConfig+0x240>)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001982:	4b83      	ldr	r3, [pc, #524]	; (8001b90 <HAL_RCC_ClockConfig+0x240>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e184      	b.n	8001c9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d010      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	4b7b      	ldr	r3, [pc, #492]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d908      	bls.n	80019c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80019b0:	4b78      	ldr	r3, [pc, #480]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	4975      	ldr	r1, [pc, #468]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d010      	beq.n	80019f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	4b70      	ldr	r3, [pc, #448]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019da:	429a      	cmp	r2, r3
 80019dc:	d908      	bls.n	80019f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80019de:	4b6d      	ldr	r3, [pc, #436]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	496a      	ldr	r1, [pc, #424]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0310 	and.w	r3, r3, #16
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d010      	beq.n	8001a1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699a      	ldr	r2, [r3, #24]
 8001a00:	4b64      	ldr	r3, [pc, #400]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d908      	bls.n	8001a1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a0c:	4b61      	ldr	r3, [pc, #388]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	495e      	ldr	r1, [pc, #376]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0320 	and.w	r3, r3, #32
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d010      	beq.n	8001a4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69da      	ldr	r2, [r3, #28]
 8001a2e:	4b59      	ldr	r3, [pc, #356]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d908      	bls.n	8001a4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001a3a:	4b56      	ldr	r3, [pc, #344]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4953      	ldr	r1, [pc, #332]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d010      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	4b4d      	ldr	r3, [pc, #308]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d908      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a68:	4b4a      	ldr	r3, [pc, #296]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f023 020f 	bic.w	r2, r3, #15
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	4947      	ldr	r1, [pc, #284]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d055      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001a86:	4b43      	ldr	r3, [pc, #268]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	4940      	ldr	r1, [pc, #256]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aa0:	4b3c      	ldr	r3, [pc, #240]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d121      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0f6      	b.n	8001c9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d107      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ab8:	4b36      	ldr	r3, [pc, #216]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d115      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0ea      	b.n	8001c9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d107      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ad0:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d109      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0de      	b.n	8001c9e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ae0:	4b2c      	ldr	r3, [pc, #176]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0d6      	b.n	8001c9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001af0:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f023 0207 	bic.w	r2, r3, #7
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4925      	ldr	r1, [pc, #148]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b02:	f7ff f809 	bl	8000b18 <HAL_GetTick>
 8001b06:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0a:	f7ff f805 	bl	8000b18 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e0be      	b.n	8001c9e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b20:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d1eb      	bne.n	8001b0a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d010      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d208      	bcs.n	8001b60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	f023 020f 	bic.w	r2, r3, #15
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	490e      	ldr	r1, [pc, #56]	; (8001b94 <HAL_RCC_ClockConfig+0x244>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_RCC_ClockConfig+0x240>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 030f 	and.w	r3, r3, #15
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d214      	bcs.n	8001b98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_RCC_ClockConfig+0x240>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 020f 	bic.w	r2, r3, #15
 8001b76:	4906      	ldr	r1, [pc, #24]	; (8001b90 <HAL_RCC_ClockConfig+0x240>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <HAL_RCC_ClockConfig+0x240>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d005      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e086      	b.n	8001c9e <HAL_RCC_ClockConfig+0x34e>
 8001b90:	52002000 	.word	0x52002000
 8001b94:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d010      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	4b3f      	ldr	r3, [pc, #252]	; (8001ca8 <HAL_RCC_ClockConfig+0x358>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d208      	bcs.n	8001bc6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001bb4:	4b3c      	ldr	r3, [pc, #240]	; (8001ca8 <HAL_RCC_ClockConfig+0x358>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	4939      	ldr	r1, [pc, #228]	; (8001ca8 <HAL_RCC_ClockConfig+0x358>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d010      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695a      	ldr	r2, [r3, #20]
 8001bd6:	4b34      	ldr	r3, [pc, #208]	; (8001ca8 <HAL_RCC_ClockConfig+0x358>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d208      	bcs.n	8001bf4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001be2:	4b31      	ldr	r3, [pc, #196]	; (8001ca8 <HAL_RCC_ClockConfig+0x358>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	492e      	ldr	r1, [pc, #184]	; (8001ca8 <HAL_RCC_ClockConfig+0x358>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0310 	and.w	r3, r3, #16
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d010      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	699a      	ldr	r2, [r3, #24]
 8001c04:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <HAL_RCC_ClockConfig+0x358>)
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d208      	bcs.n	8001c22 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c10:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <HAL_RCC_ClockConfig+0x358>)
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	4922      	ldr	r1, [pc, #136]	; (8001ca8 <HAL_RCC_ClockConfig+0x358>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d010      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69da      	ldr	r2, [r3, #28]
 8001c32:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_RCC_ClockConfig+0x358>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d208      	bcs.n	8001c50 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <HAL_RCC_ClockConfig+0x358>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	4917      	ldr	r1, [pc, #92]	; (8001ca8 <HAL_RCC_ClockConfig+0x358>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c50:	f000 f834 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <HAL_RCC_ClockConfig+0x358>)
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	0a1b      	lsrs	r3, r3, #8
 8001c5c:	f003 030f 	and.w	r3, r3, #15
 8001c60:	4912      	ldr	r1, [pc, #72]	; (8001cac <HAL_RCC_ClockConfig+0x35c>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_RCC_ClockConfig+0x358>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <HAL_RCC_ClockConfig+0x35c>)
 8001c78:	5cd3      	ldrb	r3, [r2, r3]
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
 8001c84:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <HAL_RCC_ClockConfig+0x360>)
 8001c86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c88:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <HAL_RCC_ClockConfig+0x364>)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_RCC_ClockConfig+0x368>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fef6 	bl	8000a84 <HAL_InitTick>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	58024400 	.word	0x58024400
 8001cac:	08002304 	.word	0x08002304
 8001cb0:	24000004 	.word	0x24000004
 8001cb4:	24000000 	.word	0x24000000
 8001cb8:	24000008 	.word	0x24000008

08001cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc2:	4bb3      	ldr	r3, [pc, #716]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cca:	2b18      	cmp	r3, #24
 8001ccc:	f200 8155 	bhi.w	8001f7a <HAL_RCC_GetSysClockFreq+0x2be>
 8001cd0:	a201      	add	r2, pc, #4	; (adr r2, 8001cd8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd6:	bf00      	nop
 8001cd8:	08001d3d 	.word	0x08001d3d
 8001cdc:	08001f7b 	.word	0x08001f7b
 8001ce0:	08001f7b 	.word	0x08001f7b
 8001ce4:	08001f7b 	.word	0x08001f7b
 8001ce8:	08001f7b 	.word	0x08001f7b
 8001cec:	08001f7b 	.word	0x08001f7b
 8001cf0:	08001f7b 	.word	0x08001f7b
 8001cf4:	08001f7b 	.word	0x08001f7b
 8001cf8:	08001d63 	.word	0x08001d63
 8001cfc:	08001f7b 	.word	0x08001f7b
 8001d00:	08001f7b 	.word	0x08001f7b
 8001d04:	08001f7b 	.word	0x08001f7b
 8001d08:	08001f7b 	.word	0x08001f7b
 8001d0c:	08001f7b 	.word	0x08001f7b
 8001d10:	08001f7b 	.word	0x08001f7b
 8001d14:	08001f7b 	.word	0x08001f7b
 8001d18:	08001d69 	.word	0x08001d69
 8001d1c:	08001f7b 	.word	0x08001f7b
 8001d20:	08001f7b 	.word	0x08001f7b
 8001d24:	08001f7b 	.word	0x08001f7b
 8001d28:	08001f7b 	.word	0x08001f7b
 8001d2c:	08001f7b 	.word	0x08001f7b
 8001d30:	08001f7b 	.word	0x08001f7b
 8001d34:	08001f7b 	.word	0x08001f7b
 8001d38:	08001d6f 	.word	0x08001d6f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d3c:	4b94      	ldr	r3, [pc, #592]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0320 	and.w	r3, r3, #32
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d009      	beq.n	8001d5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d48:	4b91      	ldr	r3, [pc, #580]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	08db      	lsrs	r3, r3, #3
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	4a90      	ldr	r2, [pc, #576]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
 8001d58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001d5a:	e111      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d5c:	4b8d      	ldr	r3, [pc, #564]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d5e:	61bb      	str	r3, [r7, #24]
    break;
 8001d60:	e10e      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001d62:	4b8d      	ldr	r3, [pc, #564]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d64:	61bb      	str	r3, [r7, #24]
    break;
 8001d66:	e10b      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001d68:	4b8c      	ldr	r3, [pc, #560]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001d6a:	61bb      	str	r3, [r7, #24]
    break;
 8001d6c:	e108      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d6e:	4b88      	ldr	r3, [pc, #544]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001d78:	4b85      	ldr	r3, [pc, #532]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d82:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001d84:	4b82      	ldr	r3, [pc, #520]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001d8e:	4b80      	ldr	r3, [pc, #512]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d92:	08db      	lsrs	r3, r3, #3
 8001d94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	fb02 f303 	mul.w	r3, r2, r3
 8001d9e:	ee07 3a90 	vmov	s15, r3
 8001da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001da6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 80e1 	beq.w	8001f74 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	f000 8083 	beq.w	8001ec0 <HAL_RCC_GetSysClockFreq+0x204>
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	f200 80a1 	bhi.w	8001f04 <HAL_RCC_GetSysClockFreq+0x248>
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x114>
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d056      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0x1c0>
 8001dce:	e099      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001dd0:	4b6f      	ldr	r3, [pc, #444]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d02d      	beq.n	8001e38 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001ddc:	4b6c      	ldr	r3, [pc, #432]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	08db      	lsrs	r3, r3, #3
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	4a6b      	ldr	r2, [pc, #428]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dec:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	ee07 3a90 	vmov	s15, r3
 8001df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	ee07 3a90 	vmov	s15, r3
 8001dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e06:	4b62      	ldr	r3, [pc, #392]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e0e:	ee07 3a90 	vmov	s15, r3
 8001e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e16:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e1a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001fa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001e36:	e087      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	ee07 3a90 	vmov	s15, r3
 8001e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e42:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001fa4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e4a:	4b51      	ldr	r3, [pc, #324]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e52:	ee07 3a90 	vmov	s15, r3
 8001e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e5e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001fa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e7a:	e065      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	ee07 3a90 	vmov	s15, r3
 8001e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e86:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001fa8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e8e:	4b40      	ldr	r3, [pc, #256]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e96:	ee07 3a90 	vmov	s15, r3
 8001e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ea2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001fa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ebe:	e043      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eca:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001fac <HAL_RCC_GetSysClockFreq+0x2f0>
 8001ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ed2:	4b2f      	ldr	r3, [pc, #188]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eda:	ee07 3a90 	vmov	s15, r3
 8001ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ee2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ee6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001fa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f02:	e021      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f0e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001fa8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f16:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1e:	ee07 3a90 	vmov	s15, r3
 8001f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f26:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f2a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001fa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f46:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	0a5b      	lsrs	r3, r3, #9
 8001f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f52:	3301      	adds	r3, #1
 8001f54:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	ee07 3a90 	vmov	s15, r3
 8001f5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f60:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f6c:	ee17 3a90 	vmov	r3, s15
 8001f70:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001f72:	e005      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61bb      	str	r3, [r7, #24]
    break;
 8001f78:	e002      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f7c:	61bb      	str	r3, [r7, #24]
    break;
 8001f7e:	bf00      	nop
  }

  return sysclockfreq;
 8001f80:	69bb      	ldr	r3, [r7, #24]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3724      	adds	r7, #36	; 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	58024400 	.word	0x58024400
 8001f94:	03d09000 	.word	0x03d09000
 8001f98:	003d0900 	.word	0x003d0900
 8001f9c:	007a1200 	.word	0x007a1200
 8001fa0:	46000000 	.word	0x46000000
 8001fa4:	4c742400 	.word	0x4c742400
 8001fa8:	4a742400 	.word	0x4a742400
 8001fac:	4af42400 	.word	0x4af42400

08001fb0 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f743xx.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f7xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	88fa      	ldrh	r2, [r7, #6]
 8001fc8:	809a      	strh	r2, [r3, #4]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	719a      	strb	r2, [r3, #6]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	60da      	str	r2, [r3, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 f841 	bl	800206a <_ZN15QAD_GPIO_Output10periphInitEv>
}
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	889b      	ldrh	r3, [r3, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	4619      	mov	r1, r3
 8002006:	f7ff f83f 	bl	8001088 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	741a      	strb	r2, [r3, #16]
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	889b      	ldrh	r3, [r3, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	4619      	mov	r1, r3
 800202c:	f7ff f82c 	bl	8001088 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	741a      	strb	r2, [r3, #16]
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7c1b      	ldrb	r3, [r3, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <_ZN15QAD_GPIO_Output6toggleEv+0x1c>
 800204e:	2b01      	cmp	r3, #1
 8002050:	d107      	bne.n	8002062 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_On):
	  	off();
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ffe0 	bl	8002018 <_ZN15QAD_GPIO_Output3offEv>
	    break;
 8002058:	e003      	b.n	8002062 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ffc9 	bl	8001ff2 <_ZN15QAD_GPIO_Output2onEv>
	    break;
 8002060:	bf00      	nop
	}
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 800206a:	b580      	push	{r7, lr}
 800206c:	b088      	sub	sp, #32
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
 8002080:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	889b      	ldrh	r3, [r3, #4]
 8002086:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	799b      	ldrb	r3, [r3, #6]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <_ZN15QAD_GPIO_Output10periphInitEv+0x2a>
 8002090:	2311      	movs	r3, #17
 8002092:	e000      	b.n	8002096 <_ZN15QAD_GPIO_Output10periphInitEv+0x2c>
 8002094:	2301      	movs	r3, #1
 8002096:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = m_eSpeed;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f107 020c 	add.w	r2, r7, #12
 80020ac:	4611      	mov	r1, r2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fe3a 	bl	8000d28 <HAL_GPIO_Init>
}
 80020b4:	bf00      	nop
 80020b6:	3720      	adds	r7, #32
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_Znwj>:
 80020bc:	2801      	cmp	r0, #1
 80020be:	bf38      	it	cc
 80020c0:	2001      	movcc	r0, #1
 80020c2:	b510      	push	{r4, lr}
 80020c4:	4604      	mov	r4, r0
 80020c6:	4620      	mov	r0, r4
 80020c8:	f000 f844 	bl	8002154 <malloc>
 80020cc:	b930      	cbnz	r0, 80020dc <_Znwj+0x20>
 80020ce:	f000 f807 	bl	80020e0 <_ZSt15get_new_handlerv>
 80020d2:	b908      	cbnz	r0, 80020d8 <_Znwj+0x1c>
 80020d4:	f000 f80c 	bl	80020f0 <abort>
 80020d8:	4780      	blx	r0
 80020da:	e7f4      	b.n	80020c6 <_Znwj+0xa>
 80020dc:	bd10      	pop	{r4, pc}
	...

080020e0 <_ZSt15get_new_handlerv>:
 80020e0:	4b02      	ldr	r3, [pc, #8]	; (80020ec <_ZSt15get_new_handlerv+0xc>)
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	f3bf 8f5b 	dmb	ish
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	240000a0 	.word	0x240000a0

080020f0 <abort>:
 80020f0:	b508      	push	{r3, lr}
 80020f2:	2006      	movs	r0, #6
 80020f4:	f000 f8d0 	bl	8002298 <raise>
 80020f8:	2001      	movs	r0, #1
 80020fa:	f7fe fbf7 	bl	80008ec <_exit>
	...

08002100 <__errno>:
 8002100:	4b01      	ldr	r3, [pc, #4]	; (8002108 <__errno+0x8>)
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	24000010 	.word	0x24000010

0800210c <__libc_init_array>:
 800210c:	b570      	push	{r4, r5, r6, lr}
 800210e:	4d0d      	ldr	r5, [pc, #52]	; (8002144 <__libc_init_array+0x38>)
 8002110:	4c0d      	ldr	r4, [pc, #52]	; (8002148 <__libc_init_array+0x3c>)
 8002112:	1b64      	subs	r4, r4, r5
 8002114:	10a4      	asrs	r4, r4, #2
 8002116:	2600      	movs	r6, #0
 8002118:	42a6      	cmp	r6, r4
 800211a:	d109      	bne.n	8002130 <__libc_init_array+0x24>
 800211c:	4d0b      	ldr	r5, [pc, #44]	; (800214c <__libc_init_array+0x40>)
 800211e:	4c0c      	ldr	r4, [pc, #48]	; (8002150 <__libc_init_array+0x44>)
 8002120:	f000 f8e4 	bl	80022ec <_init>
 8002124:	1b64      	subs	r4, r4, r5
 8002126:	10a4      	asrs	r4, r4, #2
 8002128:	2600      	movs	r6, #0
 800212a:	42a6      	cmp	r6, r4
 800212c:	d105      	bne.n	800213a <__libc_init_array+0x2e>
 800212e:	bd70      	pop	{r4, r5, r6, pc}
 8002130:	f855 3b04 	ldr.w	r3, [r5], #4
 8002134:	4798      	blx	r3
 8002136:	3601      	adds	r6, #1
 8002138:	e7ee      	b.n	8002118 <__libc_init_array+0xc>
 800213a:	f855 3b04 	ldr.w	r3, [r5], #4
 800213e:	4798      	blx	r3
 8002140:	3601      	adds	r6, #1
 8002142:	e7f2      	b.n	800212a <__libc_init_array+0x1e>
 8002144:	08002314 	.word	0x08002314
 8002148:	08002314 	.word	0x08002314
 800214c:	08002314 	.word	0x08002314
 8002150:	08002318 	.word	0x08002318

08002154 <malloc>:
 8002154:	4b02      	ldr	r3, [pc, #8]	; (8002160 <malloc+0xc>)
 8002156:	4601      	mov	r1, r0
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	f000 b80b 	b.w	8002174 <_malloc_r>
 800215e:	bf00      	nop
 8002160:	24000010 	.word	0x24000010

08002164 <memset>:
 8002164:	4402      	add	r2, r0
 8002166:	4603      	mov	r3, r0
 8002168:	4293      	cmp	r3, r2
 800216a:	d100      	bne.n	800216e <memset+0xa>
 800216c:	4770      	bx	lr
 800216e:	f803 1b01 	strb.w	r1, [r3], #1
 8002172:	e7f9      	b.n	8002168 <memset+0x4>

08002174 <_malloc_r>:
 8002174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002176:	1ccd      	adds	r5, r1, #3
 8002178:	f025 0503 	bic.w	r5, r5, #3
 800217c:	3508      	adds	r5, #8
 800217e:	2d0c      	cmp	r5, #12
 8002180:	bf38      	it	cc
 8002182:	250c      	movcc	r5, #12
 8002184:	2d00      	cmp	r5, #0
 8002186:	4606      	mov	r6, r0
 8002188:	db01      	blt.n	800218e <_malloc_r+0x1a>
 800218a:	42a9      	cmp	r1, r5
 800218c:	d903      	bls.n	8002196 <_malloc_r+0x22>
 800218e:	230c      	movs	r3, #12
 8002190:	6033      	str	r3, [r6, #0]
 8002192:	2000      	movs	r0, #0
 8002194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002196:	f000 f89b 	bl	80022d0 <__malloc_lock>
 800219a:	4921      	ldr	r1, [pc, #132]	; (8002220 <_malloc_r+0xac>)
 800219c:	680a      	ldr	r2, [r1, #0]
 800219e:	4614      	mov	r4, r2
 80021a0:	b99c      	cbnz	r4, 80021ca <_malloc_r+0x56>
 80021a2:	4f20      	ldr	r7, [pc, #128]	; (8002224 <_malloc_r+0xb0>)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	b923      	cbnz	r3, 80021b2 <_malloc_r+0x3e>
 80021a8:	4621      	mov	r1, r4
 80021aa:	4630      	mov	r0, r6
 80021ac:	f000 f83c 	bl	8002228 <_sbrk_r>
 80021b0:	6038      	str	r0, [r7, #0]
 80021b2:	4629      	mov	r1, r5
 80021b4:	4630      	mov	r0, r6
 80021b6:	f000 f837 	bl	8002228 <_sbrk_r>
 80021ba:	1c43      	adds	r3, r0, #1
 80021bc:	d123      	bne.n	8002206 <_malloc_r+0x92>
 80021be:	230c      	movs	r3, #12
 80021c0:	6033      	str	r3, [r6, #0]
 80021c2:	4630      	mov	r0, r6
 80021c4:	f000 f88a 	bl	80022dc <__malloc_unlock>
 80021c8:	e7e3      	b.n	8002192 <_malloc_r+0x1e>
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	1b5b      	subs	r3, r3, r5
 80021ce:	d417      	bmi.n	8002200 <_malloc_r+0x8c>
 80021d0:	2b0b      	cmp	r3, #11
 80021d2:	d903      	bls.n	80021dc <_malloc_r+0x68>
 80021d4:	6023      	str	r3, [r4, #0]
 80021d6:	441c      	add	r4, r3
 80021d8:	6025      	str	r5, [r4, #0]
 80021da:	e004      	b.n	80021e6 <_malloc_r+0x72>
 80021dc:	6863      	ldr	r3, [r4, #4]
 80021de:	42a2      	cmp	r2, r4
 80021e0:	bf0c      	ite	eq
 80021e2:	600b      	streq	r3, [r1, #0]
 80021e4:	6053      	strne	r3, [r2, #4]
 80021e6:	4630      	mov	r0, r6
 80021e8:	f000 f878 	bl	80022dc <__malloc_unlock>
 80021ec:	f104 000b 	add.w	r0, r4, #11
 80021f0:	1d23      	adds	r3, r4, #4
 80021f2:	f020 0007 	bic.w	r0, r0, #7
 80021f6:	1ac2      	subs	r2, r0, r3
 80021f8:	d0cc      	beq.n	8002194 <_malloc_r+0x20>
 80021fa:	1a1b      	subs	r3, r3, r0
 80021fc:	50a3      	str	r3, [r4, r2]
 80021fe:	e7c9      	b.n	8002194 <_malloc_r+0x20>
 8002200:	4622      	mov	r2, r4
 8002202:	6864      	ldr	r4, [r4, #4]
 8002204:	e7cc      	b.n	80021a0 <_malloc_r+0x2c>
 8002206:	1cc4      	adds	r4, r0, #3
 8002208:	f024 0403 	bic.w	r4, r4, #3
 800220c:	42a0      	cmp	r0, r4
 800220e:	d0e3      	beq.n	80021d8 <_malloc_r+0x64>
 8002210:	1a21      	subs	r1, r4, r0
 8002212:	4630      	mov	r0, r6
 8002214:	f000 f808 	bl	8002228 <_sbrk_r>
 8002218:	3001      	adds	r0, #1
 800221a:	d1dd      	bne.n	80021d8 <_malloc_r+0x64>
 800221c:	e7cf      	b.n	80021be <_malloc_r+0x4a>
 800221e:	bf00      	nop
 8002220:	240000a4 	.word	0x240000a4
 8002224:	240000a8 	.word	0x240000a8

08002228 <_sbrk_r>:
 8002228:	b538      	push	{r3, r4, r5, lr}
 800222a:	4d06      	ldr	r5, [pc, #24]	; (8002244 <_sbrk_r+0x1c>)
 800222c:	2300      	movs	r3, #0
 800222e:	4604      	mov	r4, r0
 8002230:	4608      	mov	r0, r1
 8002232:	602b      	str	r3, [r5, #0]
 8002234:	f7fe fb64 	bl	8000900 <_sbrk>
 8002238:	1c43      	adds	r3, r0, #1
 800223a:	d102      	bne.n	8002242 <_sbrk_r+0x1a>
 800223c:	682b      	ldr	r3, [r5, #0]
 800223e:	b103      	cbz	r3, 8002242 <_sbrk_r+0x1a>
 8002240:	6023      	str	r3, [r4, #0]
 8002242:	bd38      	pop	{r3, r4, r5, pc}
 8002244:	240000b0 	.word	0x240000b0

08002248 <_raise_r>:
 8002248:	291f      	cmp	r1, #31
 800224a:	b538      	push	{r3, r4, r5, lr}
 800224c:	4604      	mov	r4, r0
 800224e:	460d      	mov	r5, r1
 8002250:	d904      	bls.n	800225c <_raise_r+0x14>
 8002252:	2316      	movs	r3, #22
 8002254:	6003      	str	r3, [r0, #0]
 8002256:	f04f 30ff 	mov.w	r0, #4294967295
 800225a:	bd38      	pop	{r3, r4, r5, pc}
 800225c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800225e:	b112      	cbz	r2, 8002266 <_raise_r+0x1e>
 8002260:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002264:	b94b      	cbnz	r3, 800227a <_raise_r+0x32>
 8002266:	4620      	mov	r0, r4
 8002268:	f000 f830 	bl	80022cc <_getpid_r>
 800226c:	462a      	mov	r2, r5
 800226e:	4601      	mov	r1, r0
 8002270:	4620      	mov	r0, r4
 8002272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002276:	f000 b817 	b.w	80022a8 <_kill_r>
 800227a:	2b01      	cmp	r3, #1
 800227c:	d00a      	beq.n	8002294 <_raise_r+0x4c>
 800227e:	1c59      	adds	r1, r3, #1
 8002280:	d103      	bne.n	800228a <_raise_r+0x42>
 8002282:	2316      	movs	r3, #22
 8002284:	6003      	str	r3, [r0, #0]
 8002286:	2001      	movs	r0, #1
 8002288:	e7e7      	b.n	800225a <_raise_r+0x12>
 800228a:	2400      	movs	r4, #0
 800228c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002290:	4628      	mov	r0, r5
 8002292:	4798      	blx	r3
 8002294:	2000      	movs	r0, #0
 8002296:	e7e0      	b.n	800225a <_raise_r+0x12>

08002298 <raise>:
 8002298:	4b02      	ldr	r3, [pc, #8]	; (80022a4 <raise+0xc>)
 800229a:	4601      	mov	r1, r0
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	f7ff bfd3 	b.w	8002248 <_raise_r>
 80022a2:	bf00      	nop
 80022a4:	24000010 	.word	0x24000010

080022a8 <_kill_r>:
 80022a8:	b538      	push	{r3, r4, r5, lr}
 80022aa:	4d07      	ldr	r5, [pc, #28]	; (80022c8 <_kill_r+0x20>)
 80022ac:	2300      	movs	r3, #0
 80022ae:	4604      	mov	r4, r0
 80022b0:	4608      	mov	r0, r1
 80022b2:	4611      	mov	r1, r2
 80022b4:	602b      	str	r3, [r5, #0]
 80022b6:	f7fe fb09 	bl	80008cc <_kill>
 80022ba:	1c43      	adds	r3, r0, #1
 80022bc:	d102      	bne.n	80022c4 <_kill_r+0x1c>
 80022be:	682b      	ldr	r3, [r5, #0]
 80022c0:	b103      	cbz	r3, 80022c4 <_kill_r+0x1c>
 80022c2:	6023      	str	r3, [r4, #0]
 80022c4:	bd38      	pop	{r3, r4, r5, pc}
 80022c6:	bf00      	nop
 80022c8:	240000b0 	.word	0x240000b0

080022cc <_getpid_r>:
 80022cc:	f7fe baf6 	b.w	80008bc <_getpid>

080022d0 <__malloc_lock>:
 80022d0:	4801      	ldr	r0, [pc, #4]	; (80022d8 <__malloc_lock+0x8>)
 80022d2:	f000 b809 	b.w	80022e8 <__retarget_lock_acquire_recursive>
 80022d6:	bf00      	nop
 80022d8:	240000b8 	.word	0x240000b8

080022dc <__malloc_unlock>:
 80022dc:	4801      	ldr	r0, [pc, #4]	; (80022e4 <__malloc_unlock+0x8>)
 80022de:	f000 b804 	b.w	80022ea <__retarget_lock_release_recursive>
 80022e2:	bf00      	nop
 80022e4:	240000b8 	.word	0x240000b8

080022e8 <__retarget_lock_acquire_recursive>:
 80022e8:	4770      	bx	lr

080022ea <__retarget_lock_release_recursive>:
 80022ea:	4770      	bx	lr

080022ec <_init>:
 80022ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ee:	bf00      	nop
 80022f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022f2:	bc08      	pop	{r3}
 80022f4:	469e      	mov	lr, r3
 80022f6:	4770      	bx	lr

080022f8 <_fini>:
 80022f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fa:	bf00      	nop
 80022fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fe:	bc08      	pop	{r3}
 8002300:	469e      	mov	lr, r3
 8002302:	4770      	bx	lr
